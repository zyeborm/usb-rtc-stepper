
mains-powered-stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000026e4  00002778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800148  00800148  000027c0  2**0
                  ALLOC
  3 .stab         000057f0  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a8  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000498  00000000  00000000  00009358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d2a  00000000  00000000  000097f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000086b8  00000000  00000000  0000a51a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002086  00000000  00000000  00012bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006ae2  00000000  00000000  00014c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  0001b73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000038b1  00000000  00000000  0001be2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004173  00000000  00000000  0001f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001059  00000000  00000000  00023850  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000708  00000000  00000000  000248a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	5d c1       	rjmp	.+698    	; 0x2c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c1       	rjmp	.+694    	; 0x2c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c1       	rjmp	.+690    	; 0x2c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c1       	rjmp	.+686    	; 0x2c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c1       	rjmp	.+682    	; 0x2c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c1       	rjmp	.+678    	; 0x2c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c1       	rjmp	.+674    	; 0x2c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c1       	rjmp	.+670    	; 0x2c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c1       	rjmp	.+666    	; 0x2c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c4       	rjmp	.+2280   	; 0x912 <__vector_10>
      2a:	00 00       	nop
      2c:	3b c5       	rjmp	.+2678   	; 0xaa4 <__vector_11>
      2e:	00 00       	nop
      30:	47 c1       	rjmp	.+654    	; 0x2c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c1       	rjmp	.+650    	; 0x2c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c1       	rjmp	.+646    	; 0x2c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c1       	rjmp	.+642    	; 0x2c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c1       	rjmp	.+638    	; 0x2c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c1       	rjmp	.+634    	; 0x2c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c1       	rjmp	.+630    	; 0x2c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c1       	rjmp	.+626    	; 0x2c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1a c2       	rjmp	.+1076   	; 0x486 <__vector_20>
      52:	00 00       	nop
      54:	2e c2       	rjmp	.+1116   	; 0x4b2 <__vector_21>
      56:	00 00       	nop
      58:	33 c1       	rjmp	.+614    	; 0x2c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	31 c1       	rjmp	.+610    	; 0x2c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2f c1       	rjmp	.+606    	; 0x2c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	2d c1       	rjmp	.+602    	; 0x2c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	2b c1       	rjmp	.+598    	; 0x2c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	29 c1       	rjmp	.+594    	; 0x2c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	27 c1       	rjmp	.+590    	; 0x2c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c1       	rjmp	.+586    	; 0x2c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c1       	rjmp	.+582    	; 0x2c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c1       	rjmp	.+578    	; 0x2c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1f c1       	rjmp	.+574    	; 0x2c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	1d c1       	rjmp	.+570    	; 0x2c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c1       	rjmp	.+566    	; 0x2c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c1       	rjmp	.+972    	; 0x45a <__vector_35>
      8e:	00 00       	nop
      90:	17 c1       	rjmp	.+558    	; 0x2c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c1       	rjmp	.+554    	; 0x2c0 <__bad_interrupt>
      96:	00 00       	nop
      98:	13 c1       	rjmp	.+550    	; 0x2c0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	11 c1       	rjmp	.+546    	; 0x2c0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0f c1       	rjmp	.+542    	; 0x2c0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0d c1       	rjmp	.+538    	; 0x2c0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0b c1       	rjmp	.+534    	; 0x2c0 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     12a:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000138 <__c.1865>:
     138:	6e 61 6e 00                                         nan.

0000013c <__c.1863>:
     13c:	69 6e 66 00                                         inf.

00000140 <__c.2058>:
     140:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     150:	47 00                                               G.

00000152 <pstr_an>:
     152:	61 6e 00                                            an.

00000155 <pstr_nfinity>:
     155:	6e 66 69 6e 69 74 79 00                             nfinity.

0000015d <pwr_m10>:
     15d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     16d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000175 <pwr_p10>:
     175:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     185:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     195:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     1a5:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     1b5:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     1c5:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     1d5:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     1e5:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     1f5:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     205:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     215:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     225:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     235:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     245:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     255:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     265:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     275:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     285:	3d 27 00                                            ='.

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d5 e0       	ldi	r29, 0x05	; 5
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61

00000294 <__do_copy_data>:
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	a0 e0       	ldi	r26, 0x00	; 0
     298:	b1 e0       	ldi	r27, 0x01	; 1
     29a:	e4 ee       	ldi	r30, 0xE4	; 228
     29c:	f6 e2       	ldi	r31, 0x26	; 38
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__do_copy_data+0x10>
     2a0:	05 90       	lpm	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	a8 34       	cpi	r26, 0x48	; 72
     2a6:	b1 07       	cpc	r27, r17
     2a8:	d9 f7       	brne	.-10     	; 0x2a0 <__do_copy_data+0xc>

000002aa <__do_clear_bss>:
     2aa:	11 e0       	ldi	r17, 0x01	; 1
     2ac:	a8 e4       	ldi	r26, 0x48	; 72
     2ae:	b1 e0       	ldi	r27, 0x01	; 1
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <.do_clear_bss_start>

000002b2 <.do_clear_bss_loop>:
     2b2:	1d 92       	st	X+, r1

000002b4 <.do_clear_bss_start>:
     2b4:	ac 36       	cpi	r26, 0x6C	; 108
     2b6:	b1 07       	cpc	r27, r17
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <.do_clear_bss_loop>
     2ba:	30 d0       	rcall	.+96     	; 0x31c <main>
     2bc:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <_exit>

000002c0 <__bad_interrupt>:
     2c0:	9f ce       	rjmp	.-706    	; 0x0 <__vectors>

000002c2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Hardware Initialization */
	MCUCR=(1<<JTD); 
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	85 bf       	out	0x35, r24	; 53
  MCUCR=(1<<JTD);
     2c6:	85 bf       	out	0x35, r24	; 53
  
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2c8:	84 b7       	in	r24, 0x34	; 52
     2ca:	87 7f       	andi	r24, 0xF7	; 247
     2cc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2ce:	88 e1       	ldi	r24, 0x18	; 24
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	80 93 60 00 	sts	0x0060, r24
     2d8:	10 92 60 00 	sts	0x0060, r1
     2dc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	80 e8       	ldi	r24, 0x80	; 128
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	80 93 61 00 	sts	0x0061, r24
     2ea:	90 93 61 00 	sts	0x0061, r25
     2ee:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

  SETBIT(FLASHER_DDR,FLASHER_PIN);
     2f0:	81 9a       	sbi	0x10, 1	; 16
  C_SETBIT(FLASHER_LED);
     2f2:	89 9a       	sbi	0x11, 1	; 17

  SETBIT(TIMER1_PWM_DDR,TIMER1_PWM_PIN);
     2f4:	26 9a       	sbi	0x04, 6	; 4
  C_SETBIT(TIMER1_PWM);  
     2f6:	2e 9a       	sbi	0x05, 6	; 5

  SETBIT(DIRECTION_DDR,DIRECTION_PIN);
     2f8:	25 9a       	sbi	0x04, 5	; 4
  C_SETBIT(DIRECTION);
     2fa:	2d 9a       	sbi	0x05, 5	; 5

  SETBIT(SLEEP_DDR,SLEEP_PIN);
     2fc:	24 9a       	sbi	0x04, 4	; 4
  C_SETBIT(SLEEP_DRV);
     2fe:	2c 9a       	sbi	0x05, 4	; 5
  OCR1A = 32;
//  PRR0 |= (1<<PRTIM1);  // disable the timer1 module power    
*/
  
  //timer0 used for timekeeping
  TCCR0A |= (1 << WGM11); //set to CTC with top at OCR0A
     300:	84 b5       	in	r24, 0x24	; 36
     302:	82 60       	ori	r24, 0x02	; 2
     304:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS02)| ( 1 << CS00); //clck is fosc/1024
     306:	85 b5       	in	r24, 0x25	; 37
     308:	85 60       	ori	r24, 0x05	; 5
     30a:	85 bd       	out	0x25, r24	; 37
  TIMSK0 |= (1<<OCIE0A); //enable interrupt on compare (not overflow)
     30c:	ee e6       	ldi	r30, 0x6E	; 110
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	82 60       	ori	r24, 0x02	; 2
     314:	80 83       	st	Z, r24

  OCR0A = 155; //set for 100.16Hz
     316:	8b e9       	ldi	r24, 0x9B	; 155
     318:	87 bd       	out	0x27, r24	; 39

    
	//Joystick_Init();
	//LEDs_Init();
	USB_Init();
}
     31a:	de c2       	rjmp	.+1468   	; 0x8d8 <USB_Init>

0000031c <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	2f 97       	sbiw	r28, 0x0f	; 15
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     33c:	c2 df       	rcall	.-124    	; 0x2c2 <SetupHardware>
USB_Connected = 0;
     33e:	10 92 59 01 	sts	0x0159, r1
char rx_buffer[RX_ARRAY_SIZE];
memset(rx_buffer,'\0',RX_ARRAY_SIZE); 
     342:	fe 01       	movw	r30, r28
     344:	31 96       	adiw	r30, 0x01	; 1
     346:	8f e0       	ldi	r24, 0x0F	; 15
     348:	df 01       	movw	r26, r30
     34a:	1d 92       	st	X+, r1
     34c:	8a 95       	dec	r24
     34e:	e9 f7       	brne	.-6      	; 0x34a <main+0x2e>
	
	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     350:	8c e2       	ldi	r24, 0x2C	; 44
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	69 e4       	ldi	r22, 0x49	; 73
     356:	71 e0       	ldi	r23, 0x01	; 1
     358:	37 d7       	rcall	.+3694   	; 0x11c8 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     35a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35c:	8f ef       	ldi	r24, 0xFF	; 255
     35e:	93 ed       	ldi	r25, 0xD3	; 211
     360:	a0 e3       	ldi	r26, 0x30	; 48
     362:	81 50       	subi	r24, 0x01	; 1
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	a0 40       	sbci	r26, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <main+0x46>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x50>
     36c:	00 00       	nop


	GlobalInterruptEnable();
  _delay_ms(1000); //settle
  if (USB_Connected == 1)
     36e:	80 91 59 01 	lds	r24, 0x0159
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	31 f4       	brne	.+12     	; 0x382 <main+0x66>
  {
    fprintf(&USBSerialStream,"Mains Powered stepper V 1\r\n");
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	69 e4       	ldi	r22, 0x49	; 73
     37c:	71 e0       	ldi	r23, 0x01	; 1
     37e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputs>
  }
  

  CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     382:	8c e2       	ldi	r24, 0x2C	; 44
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	8c d6       	rcall	.+3352   	; 0x10a0 <CDC_Device_USBTask>
	USB_USBTask();
     388:	2c d5       	rcall	.+2648   	; 0xde2 <USB_USBTask>
         fprintf(&USBSerialStream,"CUR 1 = %li : 2 = %li\r\n", inner_set_RPS,outer_set_RPS);
         fprintf(&USBSerialStream,"POT L = %u : R = %u\r\n", pot_l,pot_r);           
         fprintf(&USBSerialStream,"Counterspin # : %s\r\n",rx_buffer);
         */

         C_FLIPBIT(FLASHER_LED);  
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	c9 2e       	mov	r12, r25
         C_FLIPBIT(TIMER1_PWM);  
     38e:	80 e4       	ldi	r24, 0x40	; 64
     390:	d8 2e       	mov	r13, r24
		/* Recieve Data*/
		if (CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface)) 
    { 

	  
      rx_buffer[recieve_ptr] = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);   
     392:	8e 01       	movw	r16, r28
     394:	0f 5f       	subi	r16, 0xFF	; 255
     396:	1f 4f       	sbci	r17, 0xFF	; 255
	for (;;)
	{
	  static uint8_t recieve_ptr = 0;
	  uint8_t packet_rxed = 0;
	  
    if (timer_ticked == 1)
     398:	80 91 5a 01 	lds	r24, 0x015A
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	b1 f4       	brne	.+44     	; 0x3cc <main+0xb0>
    {
       static uint8_t flasher;  
       flasher++;
     3a0:	80 91 57 01 	lds	r24, 0x0157
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	80 93 57 01 	sts	0x0157, r24
       if (flasher == 1) //10 Hz
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	41 f4       	brne	.+16     	; 0x3be <main+0xa2>
         fprintf(&USBSerialStream,"CUR 1 = %li : 2 = %li\r\n", inner_set_RPS,outer_set_RPS);
         fprintf(&USBSerialStream,"POT L = %u : R = %u\r\n", pot_l,pot_r);           
         fprintf(&USBSerialStream,"Counterspin # : %s\r\n",rx_buffer);
         */

         C_FLIPBIT(FLASHER_LED);  
     3ae:	81 b3       	in	r24, 0x11	; 17
     3b0:	8c 25       	eor	r24, r12
     3b2:	81 bb       	out	0x11, r24	; 17
         C_FLIPBIT(TIMER1_PWM);  
     3b4:	85 b1       	in	r24, 0x05	; 5
     3b6:	8d 25       	eor	r24, r13
     3b8:	85 b9       	out	0x05, r24	; 5
         flasher = 0;
     3ba:	10 92 57 01 	sts	0x0157, r1
       } 
       timer_ticked = 0;
     3be:	10 92 5a 01 	sts	0x015A, r1
       
       ADCSRA |= (1 << ADSC);  // Enable ADC
     3c2:	80 91 7a 00 	lds	r24, 0x007A
     3c6:	80 64       	ori	r24, 0x40	; 64
     3c8:	80 93 7a 00 	sts	0x007A, r24
    }

		/* Recieve Data*/
		if (CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface)) 
     3cc:	8c e2       	ldi	r24, 0x2C	; 44
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	7f d6       	rcall	.+3326   	; 0x10d0 <CDC_Device_BytesReceived>
     3d2:	00 97       	sbiw	r24, 0x00	; 0
     3d4:	09 f1       	breq	.+66     	; 0x418 <main+0xfc>
    { 

	  
      rx_buffer[recieve_ptr] = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);   
     3d6:	e0 90 58 01 	lds	r14, 0x0158
     3da:	ff 24       	eor	r15, r15
     3dc:	8c e2       	ldi	r24, 0x2C	; 44
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	ac d6       	rcall	.+3416   	; 0x113a <CDC_Device_ReceiveByte>
     3e2:	f8 01       	movw	r30, r16
     3e4:	ee 0d       	add	r30, r14
     3e6:	ff 1d       	adc	r31, r15
     3e8:	80 83       	st	Z, r24

      if (rx_buffer[recieve_ptr] == '\r')
     3ea:	80 91 58 01 	lds	r24, 0x0158
     3ee:	f8 01       	movw	r30, r16
     3f0:	e8 0f       	add	r30, r24
     3f2:	f1 1d       	adc	r31, r1
     3f4:	90 81       	ld	r25, Z
     3f6:	9d 30       	cpi	r25, 0x0D	; 13
     3f8:	09 f4       	brne	.+2      	; 0x3fc <main+0xe0>
      {
        rx_buffer[recieve_ptr] = '\0'; //end the string on rx of CR
     3fa:	10 82       	st	Z, r1
        packet_rxed = 1;
      }


   	  if (recieve_ptr >= RX_ARRAY_SIZE) // too much data
     3fc:	8f 30       	cpi	r24, 0x0F	; 15
     3fe:	48 f0       	brcs	.+18     	; 0x412 <main+0xf6>
	    {
	      recieve_ptr = 0;	      
     400:	10 92 58 01 	sts	0x0158, r1
	      fputs("\r\nRX Overflow\r\n", &USBSerialStream);
     404:	8c e1       	ldi	r24, 0x1C	; 28
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	69 e4       	ldi	r22, 0x49	; 73
     40a:	71 e0       	ldi	r23, 0x01	; 1
     40c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputs>
     410:	03 c0       	rjmp	.+6      	; 0x418 <main+0xfc>
	    } else {
	      recieve_ptr++;
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	80 93 58 01 	sts	0x0158, r24
      memset(rx_buffer,'\0',RX_ARRAY_SIZE); 
      packet_rxed = 0;      
    */
    }
    
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     418:	8c e2       	ldi	r24, 0x2C	; 44
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	41 d6       	rcall	.+3202   	; 0x10a0 <CDC_Device_USBTask>
		USB_USBTask();
     41e:	e1 d4       	rcall	.+2498   	; 0xde2 <USB_USBTask>
	}
     420:	bb cf       	rjmp	.-138    	; 0x398 <main+0x7c>

00000422 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     422:	08 95       	ret

00000424 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     424:	08 95       	ret

00000426 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     426:	8c e2       	ldi	r24, 0x2C	; 44
     428:	91 e0       	ldi	r25, 0x01	; 1

	//LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     42a:	a4 c5       	rjmp	.+2888   	; 0xf74 <CDC_Device_ConfigureEndpoints>

0000042c <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     42c:	8c e2       	ldi	r24, 0x2C	; 44
     42e:	91 e0       	ldi	r25, 0x01	; 1
}
     430:	f4 c4       	rjmp	.+2536   	; 0xe1a <CDC_Device_ProcessControlRequest>

00000432 <EVENT_CDC_Device_ControLineStateChanged>:

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo) 
{ 
        static bool PreviousDTRState = false; 
        bool        CurrentDTRState  = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR); 
     432:	fc 01       	movw	r30, r24
     434:	20 89       	ldd	r18, Z+16	; 0x10
     436:	21 70       	andi	r18, 0x01	; 1

        /* Check if the DTR line has been asserted */ 
        if (!(PreviousDTRState) && CurrentDTRState) 
     438:	80 91 48 01 	lds	r24, 0x0148
     43c:	88 23       	and	r24, r24
     43e:	31 f4       	brne	.+12     	; 0x44c <EVENT_CDC_Device_ControLineStateChanged+0x1a>
     440:	22 23       	and	r18, r18
     442:	41 f0       	breq	.+16     	; 0x454 <EVENT_CDC_Device_ControLineStateChanged+0x22>
         // Host application has Connected to the COM port 
         // Set LED On    
            //LEDs_TurnOffLEDs(LEDS_LED1);         // this actually turns LED on 
                                        // (bug in LED driver for OLIMEX board - LUFA-120219) 
         
         USB_Connected = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 59 01 	sts	0x0159, r24
     44a:	04 c0       	rjmp	.+8      	; 0x454 <EVENT_CDC_Device_ControLineStateChanged+0x22>
        } 
        else 
        { 
        if (PreviousDTRState && !(CurrentDTRState) ) 
     44c:	22 23       	and	r18, r18
     44e:	11 f4       	brne	.+4      	; 0x454 <EVENT_CDC_Device_ControLineStateChanged+0x22>
          // Host application has Disconnected from the COM port 
          // Set LED Off    
            // LEDs_TurnOnLEDs(LEDS_LED1);      // this actually turns the LED off 
                                    // (bug in LED driver for OLIMEX board - LUFA-120219) 
         
         USB_Connected = 0;         
     450:	10 92 59 01 	sts	0x0159, r1
        }                  
      }          
        PreviousDTRState = CurrentDTRState; 
     454:	20 93 48 01 	sts	0x0148, r18
} 
     458:	08 95       	ret

0000045a <__vector_35>:

ISR(TIMER3_OVF_vect)
{
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
  ICR3 = timer3_buffer;
     468:	80 91 5b 01 	lds	r24, 0x015B
     46c:	90 91 5c 01 	lds	r25, 0x015C
     470:	90 93 97 00 	sts	0x0097, r25
     474:	80 93 96 00 	sts	0x0096, r24
}
     478:	9f 91       	pop	r25
     47a:	8f 91       	pop	r24
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_20>:

ISR(TIMER1_OVF_vect)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
  ICR1 = timer1_buffer;
     494:	80 91 5d 01 	lds	r24, 0x015D
     498:	90 91 5e 01 	lds	r25, 0x015E
     49c:	90 93 87 00 	sts	0x0087, r25
     4a0:	80 93 86 00 	sts	0x0086, r24
}
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	8f 93       	push	r24

 timer_ticked = 1; 
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 5a 01 	sts	0x015A, r24
}
     4c4:	8f 91       	pop	r24
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4d0:	92 30       	cpi	r25, 0x02	; 2
     4d2:	29 f0       	breq	.+10     	; 0x4de <CALLBACK_USB_GetDescriptor+0xe>
     4d4:	93 30       	cpi	r25, 0x03	; 3
     4d6:	41 f0       	breq	.+16     	; 0x4e8 <CALLBACK_USB_GetDescriptor+0x18>
     4d8:	91 30       	cpi	r25, 0x01	; 1
     4da:	e9 f4       	brne	.+58     	; 0x516 <CALLBACK_USB_GetDescriptor+0x46>
     4dc:	17 c0       	rjmp	.+46     	; 0x50c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4de:	2e e3       	ldi	r18, 0x3E	; 62
     4e0:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     4e2:	ee eb       	ldi	r30, 0xBE	; 190
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     4e6:	1b c0       	rjmp	.+54     	; 0x51e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	41 f0       	breq	.+16     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x2c>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	18 f0       	brcs	.+6      	; 0x4f6 <CALLBACK_USB_GetDescriptor+0x26>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	89 f4       	brne	.+34     	; 0x516 <CALLBACK_USB_GetDescriptor+0x46>
     4f4:	06 c0       	rjmp	.+12     	; 0x502 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4f6:	ec ef       	ldi	r30, 0xFC	; 252
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4fc:	e0 e0       	ldi	r30, 0x00	; 0
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	02 c0       	rjmp	.+4      	; 0x506 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     502:	ea e1       	ldi	r30, 0x1A	; 26
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	24 91       	lpm	r18, Z+
     508:	30 e0       	ldi	r19, 0x00	; 0
					break;
     50a:	09 c0       	rjmp	.+18     	; 0x51e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     50c:	22 e1       	ldi	r18, 0x12	; 18
     50e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     510:	ec ea       	ldi	r30, 0xAC	; 172
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	04 c0       	rjmp	.+8      	; 0x51e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     51a:	e0 e0       	ldi	r30, 0x00	; 0
     51c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     51e:	da 01       	movw	r26, r20
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	fc 93       	st	X, r31
     524:	ee 93       	st	-X, r30
	return Size;
}
     526:	c9 01       	movw	r24, r18
     528:	08 95       	ret

0000052a <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     52a:	48 2f       	mov	r20, r24
     52c:	59 2f       	mov	r21, r25
     52e:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     530:	80 91 6a 01 	lds	r24, 0x016A
     534:	90 91 6b 01 	lds	r25, 0x016B
     538:	86 17       	cp	r24, r22
     53a:	97 07       	cpc	r25, r23
     53c:	18 f4       	brcc	.+6      	; 0x544 <Endpoint_Write_Control_Stream_LE+0x1a>
     53e:	bc 01       	movw	r22, r24
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	3c c0       	rjmp	.+120    	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     544:	61 15       	cp	r22, r1
     546:	71 05       	cpc	r23, r1
     548:	d9 f7       	brne	.-10     	; 0x540 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     54a:	80 91 e8 00 	lds	r24, 0x00E8
     54e:	8e 77       	andi	r24, 0x7E	; 126
     550:	80 93 e8 00 	sts	0x00E8, r24
     554:	f5 cf       	rjmp	.-22     	; 0x540 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     556:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     55a:	88 23       	and	r24, r24
     55c:	09 f4       	brne	.+2      	; 0x560 <Endpoint_Write_Control_Stream_LE+0x36>
     55e:	44 c0       	rjmp	.+136    	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     560:	85 30       	cpi	r24, 0x05	; 5
     562:	f1 f1       	breq	.+124    	; 0x5e0 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     564:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     568:	83 fd       	sbrc	r24, 3
     56a:	3c c0       	rjmp	.+120    	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     56c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     570:	82 fd       	sbrc	r24, 2
     572:	30 c0       	rjmp	.+96     	; 0x5d4 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     574:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     578:	80 ff       	sbrs	r24, 0
     57a:	20 c0       	rjmp	.+64     	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     57c:	90 91 f3 00 	lds	r25, 0x00F3
     580:	80 91 f2 00 	lds	r24, 0x00F2
     584:	39 2f       	mov	r19, r25
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	82 2b       	or	r24, r18
     58c:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_Write_Control_Stream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     590:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     592:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     596:	61 50       	subi	r22, 0x01	; 1
     598:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     59a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     59c:	61 15       	cp	r22, r1
     59e:	71 05       	cpc	r23, r1
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x7e>
     5a2:	88 30       	cpi	r24, 0x08	; 8
     5a4:	91 05       	cpc	r25, r1
     5a6:	a0 f3       	brcs	.-24     	; 0x590 <Endpoint_Write_Control_Stream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	88 30       	cpi	r24, 0x08	; 8
     5ac:	91 05       	cpc	r25, r1
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <Endpoint_Write_Control_Stream_LE+0x88>
     5b0:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5b2:	80 91 e8 00 	lds	r24, 0x00E8
     5b6:	8e 77       	andi	r24, 0x7E	; 126
     5b8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5bc:	61 15       	cp	r22, r1
     5be:	71 05       	cpc	r23, r1
     5c0:	51 f6       	brne	.-108    	; 0x556 <Endpoint_Write_Control_Stream_LE+0x2c>
     5c2:	44 23       	and	r20, r20
     5c4:	41 f6       	brne	.-112    	; 0x556 <Endpoint_Write_Control_Stream_LE+0x2c>
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5c8:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5cc:	88 23       	and	r24, r24
     5ce:	61 f0       	breq	.+24     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5d0:	85 30       	cpi	r24, 0x05	; 5
     5d2:	61 f0       	breq	.+24     	; 0x5ec <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5d4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5d8:	82 ff       	sbrs	r24, 2
     5da:	f6 cf       	rjmp	.-20     	; 0x5c8 <Endpoint_Write_Control_Stream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5ee:	08 95       	ret

000005f0 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     5f0:	e8 2f       	mov	r30, r24
     5f2:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5f4:	80 91 6a 01 	lds	r24, 0x016A
     5f8:	90 91 6b 01 	lds	r25, 0x016B
     5fc:	86 17       	cp	r24, r22
     5fe:	97 07       	cpc	r25, r23
     600:	18 f4       	brcc	.+6      	; 0x608 <__stack+0x9>
     602:	bc 01       	movw	r22, r24
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	3e c0       	rjmp	.+124    	; 0x684 <__stack+0x85>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     608:	61 15       	cp	r22, r1
     60a:	71 05       	cpc	r23, r1
     60c:	d9 f7       	brne	.-10     	; 0x604 <__stack+0x5>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     60e:	80 91 e8 00 	lds	r24, 0x00E8
     612:	8e 77       	andi	r24, 0x7E	; 126
     614:	80 93 e8 00 	sts	0x00E8, r24
     618:	f5 cf       	rjmp	.-22     	; 0x604 <__stack+0x5>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     61a:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     61e:	88 23       	and	r24, r24
     620:	09 f4       	brne	.+2      	; 0x624 <__stack+0x25>
     622:	46 c0       	rjmp	.+140    	; 0x6b0 <__stack+0xb1>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     624:	85 30       	cpi	r24, 0x05	; 5
     626:	09 f4       	brne	.+2      	; 0x62a <__stack+0x2b>
     628:	3f c0       	rjmp	.+126    	; 0x6a8 <__stack+0xa9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     62a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     62e:	83 fd       	sbrc	r24, 3
     630:	3d c0       	rjmp	.+122    	; 0x6ac <__stack+0xad>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     632:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     636:	82 fd       	sbrc	r24, 2
     638:	31 c0       	rjmp	.+98     	; 0x69c <__stack+0x9d>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     63a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     63e:	80 ff       	sbrs	r24, 0
     640:	21 c0       	rjmp	.+66     	; 0x684 <__stack+0x85>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     642:	90 91 f3 00 	lds	r25, 0x00F3
     646:	80 91 f2 00 	lds	r24, 0x00F2
     64a:	39 2f       	mov	r19, r25
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	82 2b       	or	r24, r18
     652:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     654:	07 c0       	rjmp	.+14     	; 0x664 <__stack+0x65>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     656:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     658:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     65c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     65e:	61 50       	subi	r22, 0x01	; 1
     660:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     662:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     664:	61 15       	cp	r22, r1
     666:	71 05       	cpc	r23, r1
     668:	19 f0       	breq	.+6      	; 0x670 <__stack+0x71>
     66a:	88 30       	cpi	r24, 0x08	; 8
     66c:	91 05       	cpc	r25, r1
     66e:	98 f3       	brcs	.-26     	; 0x656 <__stack+0x57>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	88 30       	cpi	r24, 0x08	; 8
     674:	91 05       	cpc	r25, r1
     676:	09 f0       	breq	.+2      	; 0x67a <__stack+0x7b>
     678:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     67a:	80 91 e8 00 	lds	r24, 0x00E8
     67e:	8e 77       	andi	r24, 0x7E	; 126
     680:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     684:	61 15       	cp	r22, r1
     686:	71 05       	cpc	r23, r1
     688:	41 f6       	brne	.-112    	; 0x61a <__stack+0x1b>
     68a:	44 23       	and	r20, r20
     68c:	31 f6       	brne	.-116    	; 0x61a <__stack+0x1b>
     68e:	06 c0       	rjmp	.+12     	; 0x69c <__stack+0x9d>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     690:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     694:	88 23       	and	r24, r24
     696:	61 f0       	breq	.+24     	; 0x6b0 <__stack+0xb1>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     698:	85 30       	cpi	r24, 0x05	; 5
     69a:	61 f0       	breq	.+24     	; 0x6b4 <__stack+0xb5>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     69c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6a0:	82 ff       	sbrs	r24, 2
     6a2:	f6 cf       	rjmp	.-20     	; 0x690 <__stack+0x91>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6b4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6b6:	08 95       	ret

000006b8 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6b8:	98 2f       	mov	r25, r24
     6ba:	2c c0       	rjmp	.+88     	; 0x714 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6bc:	29 2f       	mov	r18, r25
     6be:	2f 70       	andi	r18, 0x0F	; 15
     6c0:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     6c4:	98 17       	cp	r25, r24
     6c6:	39 f0       	breq	.+14     	; 0x6d6 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     6c8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     6cc:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     6d0:	50 91 f0 00 	lds	r21, 0x00F0
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     6d6:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     6d8:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     6da:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     6dc:	21 ff       	sbrs	r18, 1
     6de:	19 c0       	rjmp	.+50     	; 0x712 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     6e0:	30 91 eb 00 	lds	r19, 0x00EB
     6e4:	3e 7f       	andi	r19, 0xFE	; 254
     6e6:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     6ea:	30 91 ed 00 	lds	r19, 0x00ED
     6ee:	3d 7f       	andi	r19, 0xFD	; 253
     6f0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     6f4:	30 91 eb 00 	lds	r19, 0x00EB
     6f8:	31 60       	ori	r19, 0x01	; 1
     6fa:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     6fe:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     702:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     706:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     70a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     70e:	27 ff       	sbrs	r18, 7
     710:	08 c0       	rjmp	.+16     	; 0x722 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     712:	9f 5f       	subi	r25, 0xFF	; 255
     714:	97 30       	cpi	r25, 0x07	; 7
     716:	90 f2       	brcs	.-92     	; 0x6bc <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     718:	8f 70       	andi	r24, 0x0F	; 15
     71a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     722:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     724:	08 95       	ret

00000726 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     734:	e8 2e       	mov	r14, r24
     736:	e7 01       	movw	r28, r14
     738:	7e 01       	movw	r14, r28
     73a:	f9 2e       	mov	r15, r25
     73c:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     73e:	00 e0       	ldi	r16, 0x00	; 0
     740:	2a c0       	rjmp	.+84     	; 0x796 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     742:	98 81       	ld	r25, Y
     744:	99 23       	and	r25, r25
     746:	29 f1       	breq	.+74     	; 0x792 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     748:	6b 81       	ldd	r22, Y+3	; 0x03
     74a:	e9 81       	ldd	r30, Y+1	; 0x01
     74c:	fa 81       	ldd	r31, Y+2	; 0x02
     74e:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     750:	89 2f       	mov	r24, r25
     752:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     754:	87 30       	cpi	r24, 0x07	; 7
     756:	18 f5       	brcc	.+70     	; 0x79e <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     758:	62 95       	swap	r22
     75a:	66 0f       	add	r22, r22
     75c:	66 0f       	add	r22, r22
     75e:	60 7c       	andi	r22, 0xC0	; 192
     760:	99 1f       	adc	r25, r25
     762:	99 27       	eor	r25, r25
     764:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     766:	69 2b       	or	r22, r25
     768:	22 30       	cpi	r18, 0x02	; 2
     76a:	10 f0       	brcs	.+4      	; 0x770 <Endpoint_ConfigureEndpointTable+0x4a>
     76c:	96 e0       	ldi	r25, 0x06	; 6
     76e:	01 c0       	rjmp	.+2      	; 0x772 <Endpoint_ConfigureEndpointTable+0x4c>
     770:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     772:	28 e0       	ldi	r18, 0x08	; 8
     774:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	03 c0       	rjmp	.+6      	; 0x780 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     77a:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     780:	2e 17       	cp	r18, r30
     782:	3f 07       	cpc	r19, r31
     784:	d0 f3       	brcs	.-12     	; 0x77a <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     786:	42 95       	swap	r20
     788:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     78a:	49 2b       	or	r20, r25
     78c:	95 df       	rcall	.-214    	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv>
     78e:	88 23       	and	r24, r24
     790:	31 f0       	breq	.+12     	; 0x79e <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     792:	0f 5f       	subi	r16, 0xFF	; 255
     794:	25 96       	adiw	r28, 0x05	; 5
     796:	01 17       	cp	r16, r17
     798:	a0 f2       	brcs	.-88     	; 0x742 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     79e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	08 95       	ret

000007ae <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7ae:	80 91 64 01 	lds	r24, 0x0164
     7b2:	87 ff       	sbrs	r24, 7
     7b4:	13 c0       	rjmp	.+38     	; 0x7dc <Endpoint_ClearStatusStage+0x2e>
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7b8:	80 91 63 01 	lds	r24, 0x0163
     7bc:	88 23       	and	r24, r24
     7be:	b9 f0       	breq	.+46     	; 0x7ee <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7c0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7c4:	82 ff       	sbrs	r24, 2
     7c6:	f8 cf       	rjmp	.-16     	; 0x7b8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7c8:	80 91 e8 00 	lds	r24, 0x00E8
     7cc:	8b 77       	andi	r24, 0x7B	; 123
     7ce:	80 93 e8 00 	sts	0x00E8, r24
     7d2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7d4:	80 91 63 01 	lds	r24, 0x0163
     7d8:	88 23       	and	r24, r24
     7da:	49 f0       	breq	.+18     	; 0x7ee <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7dc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7e0:	80 ff       	sbrs	r24, 0
     7e2:	f8 cf       	rjmp	.-16     	; 0x7d4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7e4:	80 91 e8 00 	lds	r24, 0x00E8
     7e8:	8e 77       	andi	r24, 0x7E	; 126
     7ea:	80 93 e8 00 	sts	0x00E8, r24
     7ee:	08 95       	ret

000007f0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7f0:	80 91 e4 00 	lds	r24, 0x00E4
     7f4:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     7f8:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7fa:	20 91 ec 00 	lds	r18, 0x00EC
     7fe:	20 ff       	sbrs	r18, 0
     800:	26 c0       	rjmp	.+76     	; 0x84e <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     802:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     806:	20 fd       	sbrc	r18, 0
     808:	16 c0       	rjmp	.+44     	; 0x836 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     80a:	20 91 63 01 	lds	r18, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     80e:	22 23       	and	r18, r18
     810:	a1 f0       	breq	.+40     	; 0x83a <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     812:	25 30       	cpi	r18, 0x05	; 5
     814:	a1 f0       	breq	.+40     	; 0x83e <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     816:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     81a:	25 fd       	sbrc	r18, 5
     81c:	12 c0       	rjmp	.+36     	; 0x842 <Endpoint_WaitUntilReady+0x52>
     81e:	20 91 e4 00 	lds	r18, 0x00E4
     822:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     826:	28 17       	cp	r18, r24
     828:	39 07       	cpc	r19, r25
     82a:	39 f3       	breq	.-50     	; 0x7fa <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     82c:	44 23       	and	r20, r20
     82e:	59 f0       	breq	.+22     	; 0x846 <Endpoint_WaitUntilReady+0x56>
     830:	41 50       	subi	r20, 0x01	; 1
     832:	c9 01       	movw	r24, r18
     834:	e2 cf       	rjmp	.-60     	; 0x7fa <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     84a:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     84c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     84e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     852:	22 ff       	sbrs	r18, 2
     854:	da cf       	rjmp	.-76     	; 0x80a <Endpoint_WaitUntilReady+0x1a>
     856:	f9 cf       	rjmp	.-14     	; 0x84a <Endpoint_WaitUntilReady+0x5a>

00000858 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     860:	4b d0       	rcall	.+150    	; 0x8f8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     862:	52 d0       	rcall	.+164    	; 0x908 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     864:	c8 ed       	ldi	r28, 0xD8	; 216
     866:	d0 e0       	ldi	r29, 0x00	; 0
     868:	88 81       	ld	r24, Y
     86a:	8f 77       	andi	r24, 0x7F	; 127
     86c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     86e:	88 81       	ld	r24, Y
     870:	80 68       	ori	r24, 0x80	; 128
     872:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     874:	88 81       	ld	r24, Y
     876:	8f 7d       	andi	r24, 0xDF	; 223
     878:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     87a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     87c:	10 92 63 01 	sts	0x0163, r1
	USB_Device_ConfigurationNumber  = 0;
     880:	10 92 5f 01 	sts	0x015F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     884:	10 92 61 01 	sts	0x0161, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     888:	10 92 60 01 	sts	0x0160, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     88c:	00 ee       	ldi	r16, 0xE0	; 224
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	f8 01       	movw	r30, r16
     892:	80 81       	ld	r24, Z
     894:	8b 7f       	andi	r24, 0xFB	; 251
     896:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     898:	88 81       	ld	r24, Y
     89a:	81 60       	ori	r24, 0x01	; 1
     89c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	42 e0       	ldi	r20, 0x02	; 2
     8a4:	09 df       	rcall	.-494    	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8a6:	e1 ee       	ldi	r30, 0xE1	; 225
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	8e 7f       	andi	r24, 0xFE	; 254
     8ae:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8b0:	e2 ee       	ldi	r30, 0xE2	; 226
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	81 60       	ori	r24, 0x01	; 1
     8b8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8ba:	80 81       	ld	r24, Z
     8bc:	88 60       	ori	r24, 0x08	; 8
     8be:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8c0:	f8 01       	movw	r30, r16
     8c2:	80 81       	ld	r24, Z
     8c4:	8e 7f       	andi	r24, 0xFE	; 254
     8c6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8c8:	88 81       	ld	r24, Y
     8ca:	80 61       	ori	r24, 0x10	; 16
     8cc:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     8d8:	e8 ed       	ldi	r30, 0xD8	; 216
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	8f 7e       	andi	r24, 0xEF	; 239
     8e0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     8e2:	e7 ed       	ldi	r30, 0xD7	; 215
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	81 60       	ori	r24, 0x01	; 1
     8ea:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 62 01 	sts	0x0162, r24

	USB_ResetInterface();
}
     8f6:	b0 cf       	rjmp	.-160    	; 0x858 <USB_ResetInterface>

000008f8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     8f8:	e8 ed       	ldi	r30, 0xD8	; 216
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8e 7f       	andi	r24, 0xFE	; 254
     900:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     902:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     906:	08 95       	ret

00000908 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     908:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     90c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     910:	08 95       	ret

00000912 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	2f 93       	push	r18
     91e:	3f 93       	push	r19
     920:	4f 93       	push	r20
     922:	5f 93       	push	r21
     924:	6f 93       	push	r22
     926:	7f 93       	push	r23
     928:	8f 93       	push	r24
     92a:	9f 93       	push	r25
     92c:	af 93       	push	r26
     92e:	bf 93       	push	r27
     930:	ef 93       	push	r30
     932:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     934:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     938:	82 ff       	sbrs	r24, 2
     93a:	0a c0       	rjmp	.+20     	; 0x950 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     93c:	80 91 e2 00 	lds	r24, 0x00E2
     940:	82 ff       	sbrs	r24, 2
     942:	06 c0       	rjmp	.+12     	; 0x950 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     944:	80 91 e1 00 	lds	r24, 0x00E1
     948:	8b 7f       	andi	r24, 0xFB	; 251
     94a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     94e:	48 d2       	rcall	.+1168   	; 0xde0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     950:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     954:	80 ff       	sbrs	r24, 0
     956:	1d c0       	rjmp	.+58     	; 0x992 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     958:	80 91 d8 00 	lds	r24, 0x00D8
     95c:	80 ff       	sbrs	r24, 0
     95e:	19 c0       	rjmp	.+50     	; 0x992 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     960:	80 91 da 00 	lds	r24, 0x00DA
     964:	8e 7f       	andi	r24, 0xFE	; 254
     966:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     96a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     96e:	80 ff       	sbrs	r24, 0
     970:	0c c0       	rjmp	.+24     	; 0x98a <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     976:	82 e1       	ldi	r24, 0x12	; 18
     978:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     97a:	09 b4       	in	r0, 0x29	; 41
     97c:	00 fe       	sbrs	r0, 0
     97e:	fd cf       	rjmp	.-6      	; 0x97a <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 63 01 	sts	0x0163, r24
			EVENT_USB_Device_Connect();
     986:	4d dd       	rcall	.-1382   	; 0x422 <EVENT_USB_Device_Connect>
     988:	04 c0       	rjmp	.+8      	; 0x992 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     98a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     98c:	10 92 63 01 	sts	0x0163, r1
			EVENT_USB_Device_Disconnect();
     990:	49 dd       	rcall	.-1390   	; 0x424 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     992:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     996:	80 ff       	sbrs	r24, 0
     998:	18 c0       	rjmp	.+48     	; 0x9ca <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     99a:	80 91 e2 00 	lds	r24, 0x00E2
     99e:	80 ff       	sbrs	r24, 0
     9a0:	14 c0       	rjmp	.+40     	; 0x9ca <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9a2:	80 91 e2 00 	lds	r24, 0x00E2
     9a6:	8e 7f       	andi	r24, 0xFE	; 254
     9a8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9ac:	80 91 e2 00 	lds	r24, 0x00E2
     9b0:	80 61       	ori	r24, 0x10	; 16
     9b2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     9b6:	80 91 d8 00 	lds	r24, 0x00D8
     9ba:	80 62       	ori	r24, 0x20	; 32
     9bc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9c0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     9c2:	85 e0       	ldi	r24, 0x05	; 5
     9c4:	80 93 63 01 	sts	0x0163, r24
		EVENT_USB_Device_Suspend();
     9c8:	0b d2       	rcall	.+1046   	; 0xde0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9ca:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9ce:	84 ff       	sbrs	r24, 4
     9d0:	2d c0       	rjmp	.+90     	; 0xa2c <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9d2:	80 91 e2 00 	lds	r24, 0x00E2
     9d6:	84 ff       	sbrs	r24, 4
     9d8:	29 c0       	rjmp	.+82     	; 0xa2c <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9da:	80 e1       	ldi	r24, 0x10	; 16
     9dc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9de:	82 e1       	ldi	r24, 0x12	; 18
     9e0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9e2:	09 b4       	in	r0, 0x29	; 41
     9e4:	00 fe       	sbrs	r0, 0
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9e8:	80 91 d8 00 	lds	r24, 0x00D8
     9ec:	8f 7d       	andi	r24, 0xDF	; 223
     9ee:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9f2:	80 91 e1 00 	lds	r24, 0x00E1
     9f6:	8f 7e       	andi	r24, 0xEF	; 239
     9f8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9fc:	80 91 e2 00 	lds	r24, 0x00E2
     a00:	8f 7e       	andi	r24, 0xEF	; 239
     a02:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a06:	80 91 e2 00 	lds	r24, 0x00E2
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a10:	80 91 5f 01 	lds	r24, 0x015F
     a14:	88 23       	and	r24, r24
     a16:	21 f4       	brne	.+8      	; 0xa20 <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a18:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a1c:	87 ff       	sbrs	r24, 7
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__vector_10+0x112>
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <__vector_10+0x114>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 63 01 	sts	0x0163, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a2a:	da d1       	rcall	.+948    	; 0xde0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a2c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a30:	83 ff       	sbrs	r24, 3
     a32:	27 c0       	rjmp	.+78     	; 0xa82 <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a34:	80 91 e2 00 	lds	r24, 0x00E2
     a38:	83 ff       	sbrs	r24, 3
     a3a:	23 c0       	rjmp	.+70     	; 0xa82 <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a3c:	80 91 e1 00 	lds	r24, 0x00E1
     a40:	87 7f       	andi	r24, 0xF7	; 247
     a42:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	80 93 63 01 	sts	0x0163, r24
		USB_Device_ConfigurationNumber = 0;
     a4c:	10 92 5f 01 	sts	0x015F, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a50:	80 91 e1 00 	lds	r24, 0x00E1
     a54:	8e 7f       	andi	r24, 0xFE	; 254
     a56:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a5a:	80 91 e2 00 	lds	r24, 0x00E2
     a5e:	8e 7f       	andi	r24, 0xFE	; 254
     a60:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a64:	80 91 e2 00 	lds	r24, 0x00E2
     a68:	80 61       	ori	r24, 0x10	; 16
     a6a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	42 e0       	ldi	r20, 0x02	; 2
     a74:	21 de       	rcall	.-958    	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a76:	80 91 f0 00 	lds	r24, 0x00F0
     a7a:	88 60       	ori	r24, 0x08	; 8
     a7c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a80:	af d1       	rcall	.+862    	; 0xde0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     aa4:	1f 92       	push	r1
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	1f 93       	push	r17
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ac8:	10 91 e9 00 	lds	r17, 0x00E9
     acc:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ace:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     ad6:	80 91 f0 00 	lds	r24, 0x00F0
     ada:	87 7f       	andi	r24, 0xF7	; 247
     adc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ae0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     ae2:	1b d0       	rcall	.+54     	; 0xb1a <USB_Device_ProcessControlRequest>
     ae4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ae8:	80 91 f0 00 	lds	r24, 0x00F0
     aec:	88 60       	ori	r24, 0x08	; 8
     aee:	80 93 f0 00 	sts	0x00F0, r24
     af2:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	1f 91       	pop	r17
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b1a:	1f 93       	push	r17
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	ac 97       	sbiw	r28, 0x2c	; 44
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     b30:	e4 e6       	ldi	r30, 0x64	; 100
     b32:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b34:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b38:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	ec 36       	cpi	r30, 0x6C	; 108
     b3e:	f2 07       	cpc	r31, r18
     b40:	c9 f7       	brne	.-14     	; 0xb34 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b42:	74 dc       	rcall	.-1816   	; 0x42c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b44:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b48:	83 ff       	sbrs	r24, 3
     b4a:	32 c1       	rjmp	.+612    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b4c:	80 91 64 01 	lds	r24, 0x0164

		switch (USB_ControlRequest.bRequest)
     b50:	20 91 65 01 	lds	r18, 0x0165
     b54:	25 30       	cpi	r18, 0x05	; 5
     b56:	09 f4       	brne	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0x40>
     b58:	84 c0       	rjmp	.+264    	; 0xc62 <USB_Device_ProcessControlRequest+0x148>
     b5a:	26 30       	cpi	r18, 0x06	; 6
     b5c:	40 f4       	brcc	.+16     	; 0xb6e <USB_Device_ProcessControlRequest+0x54>
     b5e:	21 30       	cpi	r18, 0x01	; 1
     b60:	a1 f1       	breq	.+104    	; 0xbca <USB_Device_ProcessControlRequest+0xb0>
     b62:	21 30       	cpi	r18, 0x01	; 1
     b64:	70 f0       	brcs	.+28     	; 0xb82 <USB_Device_ProcessControlRequest+0x68>
     b66:	23 30       	cpi	r18, 0x03	; 3
     b68:	09 f0       	breq	.+2      	; 0xb6c <USB_Device_ProcessControlRequest+0x52>
     b6a:	22 c1       	rjmp	.+580    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
     b6c:	2e c0       	rjmp	.+92     	; 0xbca <USB_Device_ProcessControlRequest+0xb0>
     b6e:	28 30       	cpi	r18, 0x08	; 8
     b70:	09 f4       	brne	.+2      	; 0xb74 <USB_Device_ProcessControlRequest+0x5a>
     b72:	f0 c0       	rjmp	.+480    	; 0xd54 <USB_Device_ProcessControlRequest+0x23a>
     b74:	29 30       	cpi	r18, 0x09	; 9
     b76:	09 f4       	brne	.+2      	; 0xb7a <USB_Device_ProcessControlRequest+0x60>
     b78:	ff c0       	rjmp	.+510    	; 0xd78 <USB_Device_ProcessControlRequest+0x25e>
     b7a:	26 30       	cpi	r18, 0x06	; 6
     b7c:	09 f0       	breq	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0x66>
     b7e:	18 c1       	rjmp	.+560    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
     b80:	93 c0       	rjmp	.+294    	; 0xca8 <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b82:	80 38       	cpi	r24, 0x80	; 128
     b84:	21 f0       	breq	.+8      	; 0xb8e <USB_Device_ProcessControlRequest+0x74>
     b86:	82 38       	cpi	r24, 0x82	; 130
     b88:	09 f0       	breq	.+2      	; 0xb8c <USB_Device_ProcessControlRequest+0x72>
     b8a:	12 c1       	rjmp	.+548    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
     b8c:	08 c0       	rjmp	.+16     	; 0xb9e <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b8e:	80 91 60 01 	lds	r24, 0x0160
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b92:	90 91 61 01 	lds	r25, 0x0161
     b96:	99 23       	and	r25, r25
     b98:	71 f0       	breq	.+28     	; 0xbb6 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b9e:	80 91 68 01 	lds	r24, 0x0168
     ba2:	8f 70       	andi	r24, 0x0F	; 15
     ba4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ba8:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	95 ff       	sbrs	r25, 5
     bb0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb6:	90 91 e8 00 	lds	r25, 0x00E8
     bba:	97 7f       	andi	r25, 0xF7	; 247
     bbc:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bc0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     bc4:	10 92 f1 00 	sts	0x00F1, r1
     bc8:	d0 c0       	rjmp	.+416    	; 0xd6a <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bca:	88 23       	and	r24, r24
     bcc:	19 f0       	breq	.+6      	; 0xbd4 <USB_Device_ProcessControlRequest+0xba>
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0xba>
     bd2:	ee c0       	rjmp	.+476    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	8f 71       	andi	r24, 0x1F	; 31
     bd8:	90 70       	andi	r25, 0x00	; 0
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	29 f0       	breq	.+10     	; 0xbe8 <USB_Device_ProcessControlRequest+0xce>
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	91 05       	cpc	r25, r1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <USB_Device_ProcessControlRequest+0xcc>
     be4:	e5 c0       	rjmp	.+458    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
     be6:	0b c0       	rjmp	.+22     	; 0xbfe <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     be8:	80 91 66 01 	lds	r24, 0x0166
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <USB_Device_ProcessControlRequest+0xd8>
     bf0:	df c0       	rjmp	.+446    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     bf2:	23 30       	cpi	r18, 0x03	; 3
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0xde>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	80 93 61 01 	sts	0x0161, r24
     bfc:	2c c0       	rjmp	.+88     	; 0xc56 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     bfe:	80 91 66 01 	lds	r24, 0x0166
     c02:	88 23       	and	r24, r24
     c04:	41 f5       	brne	.+80     	; 0xc56 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c06:	20 91 68 01 	lds	r18, 0x0168
     c0a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c0c:	09 f4       	brne	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0xf6>
     c0e:	d0 c0       	rjmp	.+416    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c10:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c14:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c18:	80 ff       	sbrs	r24, 0
     c1a:	1d c0       	rjmp	.+58     	; 0xc56 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c1c:	80 91 65 01 	lds	r24, 0x0165
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	21 f4       	brne	.+8      	; 0xc2c <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c24:	80 91 eb 00 	lds	r24, 0x00EB
     c28:	80 62       	ori	r24, 0x20	; 32
     c2a:	13 c0       	rjmp	.+38     	; 0xc52 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c2c:	80 91 eb 00 	lds	r24, 0x00EB
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <USB_Device_ProcessControlRequest+0x126>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	2a 95       	dec	r18
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <USB_Device_ProcessControlRequest+0x122>
     c44:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c48:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c4c:	80 91 eb 00 	lds	r24, 0x00EB
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c56:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c5a:	80 91 e8 00 	lds	r24, 0x00E8
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	87 c0       	rjmp	.+270    	; 0xd70 <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c62:	88 23       	and	r24, r24
     c64:	09 f0       	breq	.+2      	; 0xc68 <USB_Device_ProcessControlRequest+0x14e>
     c66:	a4 c0       	rjmp	.+328    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c68:	10 91 66 01 	lds	r17, 0x0166
     c6c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c6e:	80 91 e3 00 	lds	r24, 0x00E3
     c72:	80 78       	andi	r24, 0x80	; 128
     c74:	81 2b       	or	r24, r17
     c76:	80 93 e3 00 	sts	0x00E3, r24
     c7a:	80 91 e8 00 	lds	r24, 0x00E8
     c7e:	87 7f       	andi	r24, 0xF7	; 247
     c80:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c84:	94 dd       	rcall	.-1240   	; 0x7ae <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c86:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     c8a:	80 ff       	sbrs	r24, 0
     c8c:	fc cf       	rjmp	.-8      	; 0xc86 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     c8e:	80 91 e3 00 	lds	r24, 0x00E3
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c98:	11 23       	and	r17, r17
     c9a:	11 f0       	breq	.+4      	; 0xca0 <USB_Device_ProcessControlRequest+0x186>
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <USB_Device_ProcessControlRequest+0x188>
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	80 93 63 01 	sts	0x0163, r24
     ca6:	84 c0       	rjmp	.+264    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ca8:	80 58       	subi	r24, 0x80	; 128
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <USB_Device_ProcessControlRequest+0x196>
     cae:	80 c0       	rjmp	.+256    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     cb0:	80 91 66 01 	lds	r24, 0x0166
     cb4:	90 91 67 01 	lds	r25, 0x0167
     cb8:	23 e0       	ldi	r18, 0x03	; 3
     cba:	8c 3d       	cpi	r24, 0xDC	; 220
     cbc:	92 07       	cpc	r25, r18
     cbe:	91 f5       	brne	.+100    	; 0xd24 <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     cc4:	8a e2       	ldi	r24, 0x2A	; 42
     cc6:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cc8:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cca:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     ccc:	de 01       	movw	r26, r28
     cce:	15 96       	adiw	r26, 0x05	; 5
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     cd4:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cd6:	61 e2       	ldi	r22, 0x21	; 33
     cd8:	e4 2f       	mov	r30, r20
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	60 93 57 00 	sts	0x0057, r22
     ce0:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     ce2:	80 ff       	sbrs	r24, 0
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
     ce6:	e2 95       	swap	r30
     ce8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     cea:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     cec:	ef 70       	andi	r30, 0x0F	; 15
     cee:	2e 2f       	mov	r18, r30
     cf0:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     cf2:	ea 30       	cpi	r30, 0x0A	; 10
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <USB_Device_ProcessControlRequest+0x1e2>
     cf6:	29 5c       	subi	r18, 0xC9	; 201
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <USB_Device_ProcessControlRequest+0x1e6>
     cfc:	20 5d       	subi	r18, 0xD0	; 208
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	2d 93       	st	X+, r18
     d02:	3d 93       	st	X+, r19
     d04:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d06:	84 31       	cpi	r24, 0x14	; 20
     d08:	91 05       	cpc	r25, r1
     d0a:	31 f7       	brne	.-52     	; 0xcd8 <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d0c:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d0e:	80 91 e8 00 	lds	r24, 0x00E8
     d12:	87 7f       	andi	r24, 0xF7	; 247
     d14:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d18:	ce 01       	movw	r24, r28
     d1a:	03 96       	adiw	r24, 0x03	; 3
     d1c:	6a e2       	ldi	r22, 0x2A	; 42
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	04 dc       	rcall	.-2040   	; 0x52a <Endpoint_Write_Control_Stream_LE>
     d22:	12 c0       	rjmp	.+36     	; 0xd48 <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d24:	60 91 68 01 	lds	r22, 0x0168
     d28:	ae 01       	movw	r20, r28
     d2a:	4f 5f       	subi	r20, 0xFF	; 255
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	d0 db       	rcall	.-2144   	; 0x4d0 <CALLBACK_USB_GetDescriptor>
     d30:	bc 01       	movw	r22, r24
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	09 f4       	brne	.+2      	; 0xd38 <USB_Device_ProcessControlRequest+0x21e>
     d36:	3c c0       	rjmp	.+120    	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
     d38:	80 91 e8 00 	lds	r24, 0x00E8
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	54 dc       	rcall	.-1880   	; 0x5f0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d48:	80 91 e8 00 	lds	r24, 0x00E8
     d4c:	8b 77       	andi	r24, 0x7B	; 123
     d4e:	80 93 e8 00 	sts	0x00E8, r24
     d52:	2e c0       	rjmp	.+92     	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d54:	80 38       	cpi	r24, 0x80	; 128
     d56:	61 f5       	brne	.+88     	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d58:	80 91 e8 00 	lds	r24, 0x00E8
     d5c:	87 7f       	andi	r24, 0xF7	; 247
     d5e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d62:	80 91 5f 01 	lds	r24, 0x015F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d66:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d6a:	80 91 e8 00 	lds	r24, 0x00E8
     d6e:	8e 77       	andi	r24, 0x7E	; 126
     d70:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d74:	1c dd       	rcall	.-1480   	; 0x7ae <Endpoint_ClearStatusStage>
     d76:	1c c0       	rjmp	.+56     	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d78:	88 23       	and	r24, r24
     d7a:	d1 f4       	brne	.+52     	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d7c:	90 91 66 01 	lds	r25, 0x0166
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	b0 f4       	brcc	.+44     	; 0xdb0 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d84:	80 91 e8 00 	lds	r24, 0x00E8
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d8e:	90 93 5f 01 	sts	0x015F, r25

	Endpoint_ClearStatusStage();
     d92:	0d dd       	rcall	.-1510   	; 0x7ae <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     d94:	80 91 5f 01 	lds	r24, 0x015F
     d98:	88 23       	and	r24, r24
     d9a:	21 f4       	brne	.+8      	; 0xda4 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d9c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     da0:	87 ff       	sbrs	r24, 7
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <USB_Device_ProcessControlRequest+0x28e>
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <USB_Device_ProcessControlRequest+0x290>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 63 01 	sts	0x0163, r24

	EVENT_USB_Device_ConfigurationChanged();
     dae:	3b db       	rcall	.-2442   	; 0x426 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     db0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     db4:	83 ff       	sbrs	r24, 3
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db8:	80 91 e8 00 	lds	r24, 0x00E8
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     dc2:	80 91 eb 00 	lds	r24, 0x00EB
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     dcc:	ac 96       	adiw	r28, 0x2c	; 44
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     de0:	08 95       	ret

00000de2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     de2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     de4:	80 91 63 01 	lds	r24, 0x0163
     de8:	88 23       	and	r24, r24
     dea:	a9 f0       	breq	.+42     	; 0xe16 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     dec:	80 91 e9 00 	lds	r24, 0x00E9
     df0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     df2:	90 91 ec 00 	lds	r25, 0x00EC
     df6:	90 ff       	sbrs	r25, 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <USB_USBTask+0x1c>
     dfa:	10 e8       	ldi	r17, 0x80	; 128
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <USB_USBTask+0x1e>
     dfe:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e00:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e02:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e06:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e0a:	83 ff       	sbrs	r24, 3
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     e0e:	85 de       	rcall	.-758    	; 0xb1a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e10:	1f 70       	andi	r17, 0x0F	; 15
     e12:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e16:	1f 91       	pop	r17
     e18:	08 95       	ret

00000e1a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e20:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e24:	83 ff       	sbrs	r24, 3
     e26:	a3 c0       	rjmp	.+326    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e28:	88 81       	ld	r24, Y
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	20 91 68 01 	lds	r18, 0x0168
     e30:	30 91 69 01 	lds	r19, 0x0169
     e34:	28 17       	cp	r18, r24
     e36:	39 07       	cpc	r19, r25
     e38:	09 f0       	breq	.+2      	; 0xe3c <CDC_Device_ProcessControlRequest+0x22>
     e3a:	99 c0       	rjmp	.+306    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     e3c:	80 91 65 01 	lds	r24, 0x0165
     e40:	81 32       	cpi	r24, 0x21	; 33
     e42:	69 f0       	breq	.+26     	; 0xe5e <CDC_Device_ProcessControlRequest+0x44>
     e44:	82 32       	cpi	r24, 0x22	; 34
     e46:	20 f4       	brcc	.+8      	; 0xe50 <CDC_Device_ProcessControlRequest+0x36>
     e48:	80 32       	cpi	r24, 0x20	; 32
     e4a:	09 f0       	breq	.+2      	; 0xe4e <CDC_Device_ProcessControlRequest+0x34>
     e4c:	90 c0       	rjmp	.+288    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
     e4e:	3c c0       	rjmp	.+120    	; 0xec8 <CDC_Device_ProcessControlRequest+0xae>
     e50:	82 32       	cpi	r24, 0x22	; 34
     e52:	09 f4       	brne	.+2      	; 0xe56 <CDC_Device_ProcessControlRequest+0x3c>
     e54:	6b c0       	rjmp	.+214    	; 0xf2c <CDC_Device_ProcessControlRequest+0x112>
     e56:	83 32       	cpi	r24, 0x23	; 35
     e58:	09 f0       	breq	.+2      	; 0xe5c <CDC_Device_ProcessControlRequest+0x42>
     e5a:	89 c0       	rjmp	.+274    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
     e5c:	7a c0       	rjmp	.+244    	; 0xf52 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e5e:	80 91 64 01 	lds	r24, 0x0164
     e62:	81 3a       	cpi	r24, 0xA1	; 161
     e64:	09 f0       	breq	.+2      	; 0xe68 <CDC_Device_ProcessControlRequest+0x4e>
     e66:	83 c0       	rjmp	.+262    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e68:	80 91 e8 00 	lds	r24, 0x00E8
     e6c:	87 7f       	andi	r24, 0xF7	; 247
     e6e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e72:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e76:	80 ff       	sbrs	r24, 0
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e7a:	8c 89       	ldd	r24, Y+20	; 0x14
     e7c:	9d 89       	ldd	r25, Y+21	; 0x15
     e7e:	ae 89       	ldd	r26, Y+22	; 0x16
     e80:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e82:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     e86:	29 2f       	mov	r18, r25
     e88:	3a 2f       	mov	r19, r26
     e8a:	4b 2f       	mov	r20, r27
     e8c:	55 27       	eor	r21, r21
     e8e:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     e92:	9d 01       	movw	r18, r26
     e94:	44 27       	eor	r20, r20
     e96:	55 27       	eor	r21, r21
     e98:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     e9c:	8b 2f       	mov	r24, r27
     e9e:	99 27       	eor	r25, r25
     ea0:	aa 27       	eor	r26, r26
     ea2:	bb 27       	eor	r27, r27
     ea4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     ea8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eaa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     eae:	89 8d       	ldd	r24, Y+25	; 0x19
     eb0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     eb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eb6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eba:	80 91 e8 00 	lds	r24, 0x00E8
     ebe:	8e 77       	andi	r24, 0x7E	; 126
     ec0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ec4:	74 dc       	rcall	.-1816   	; 0x7ae <Endpoint_ClearStatusStage>
     ec6:	53 c0       	rjmp	.+166    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ec8:	80 91 64 01 	lds	r24, 0x0164
     ecc:	81 32       	cpi	r24, 0x21	; 33
     ece:	09 f0       	breq	.+2      	; 0xed2 <CDC_Device_ProcessControlRequest+0xb8>
     ed0:	4e c0       	rjmp	.+156    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ed2:	80 91 e8 00 	lds	r24, 0x00E8
     ed6:	87 7f       	andi	r24, 0xF7	; 247
     ed8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     ede:	80 91 63 01 	lds	r24, 0x0163
     ee2:	88 23       	and	r24, r24
     ee4:	09 f4       	brne	.+2      	; 0xee8 <CDC_Device_ProcessControlRequest+0xce>
     ee6:	43 c0       	rjmp	.+134    	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ee8:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     eec:	82 ff       	sbrs	r24, 2
     eee:	f7 cf       	rjmp	.-18     	; 0xede <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ef0:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     ef4:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     ef8:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     efc:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f00:	3c 8b       	std	Y+20, r19	; 0x14
     f02:	2d 8b       	std	Y+21, r18	; 0x15
     f04:	9e 8b       	std	Y+22, r25	; 0x16
     f06:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f08:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f0c:	88 8f       	std	Y+24, r24	; 0x18
     f0e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f12:	89 8f       	std	Y+25, r24	; 0x19
     f14:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f18:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f1a:	80 91 e8 00 	lds	r24, 0x00E8
     f1e:	8b 77       	andi	r24, 0x7B	; 123
     f20:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f24:	44 dc       	rcall	.-1912   	; 0x7ae <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f26:	ce 01       	movw	r24, r28
     f28:	62 d1       	rcall	.+708    	; 0x11ee <CDC_Device_Event_Stub>
     f2a:	21 c0       	rjmp	.+66     	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f2c:	80 91 64 01 	lds	r24, 0x0164
     f30:	81 32       	cpi	r24, 0x21	; 33
     f32:	e9 f4       	brne	.+58     	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f34:	80 91 e8 00 	lds	r24, 0x00E8
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f3e:	37 dc       	rcall	.-1938   	; 0x7ae <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f40:	80 91 66 01 	lds	r24, 0x0166
     f44:	90 91 67 01 	lds	r25, 0x0167
     f48:	99 8b       	std	Y+17, r25	; 0x11
     f4a:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f4c:	ce 01       	movw	r24, r28
     f4e:	71 da       	rcall	.-2846   	; 0x432 <EVENT_CDC_Device_ControLineStateChanged>
     f50:	0e c0       	rjmp	.+28     	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f52:	80 91 64 01 	lds	r24, 0x0164
     f56:	81 32       	cpi	r24, 0x21	; 33
     f58:	51 f4       	brne	.+20     	; 0xf6e <CDC_Device_ProcessControlRequest+0x154>
     f5a:	80 91 e8 00 	lds	r24, 0x00E8
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f64:	24 dc       	rcall	.-1976   	; 0x7ae <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f66:	ce 01       	movw	r24, r28
     f68:	60 91 66 01 	lds	r22, 0x0166
     f6c:	40 d1       	rcall	.+640    	; 0x11ee <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     f7a:	40 96       	adiw	r24, 0x10	; 16
     f7c:	fc 01       	movw	r30, r24
     f7e:	8b e0       	ldi	r24, 0x0B	; 11
     f80:	df 01       	movw	r26, r30
     f82:	1d 92       	st	X+, r1
     f84:	8a 95       	dec	r24
     f86:	e9 f7       	brne	.-6      	; 0xf82 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     f8c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	c6 db       	rcall	.-2164   	; 0x726 <Endpoint_ConfigureEndpointTable>
     f9a:	88 23       	and	r24, r24
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     f9e:	ce 01       	movw	r24, r28
     fa0:	06 96       	adiw	r24, 0x06	; 6
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	c0 db       	rcall	.-2176   	; 0x726 <Endpoint_ConfigureEndpointTable>
     fa6:	88 23       	and	r24, r24
     fa8:	29 f0       	breq	.+10     	; 0xfb4 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     faa:	ce 01       	movw	r24, r28
     fac:	0b 96       	adiw	r24, 0x0b	; 11
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	ba db       	rcall	.-2188   	; 0x726 <Endpoint_ConfigureEndpointTable>
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     fb4:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fc8:	80 91 63 01 	lds	r24, 0x0163
     fcc:	84 30       	cpi	r24, 0x04	; 4
     fce:	f9 f4       	brne	.+62     	; 0x100e <CDC_Device_SendByte+0x52>
     fd0:	24 89       	ldd	r18, Z+20	; 0x14
     fd2:	35 89       	ldd	r19, Z+21	; 0x15
     fd4:	46 89       	ldd	r20, Z+22	; 0x16
     fd6:	57 89       	ldd	r21, Z+23	; 0x17
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	41 05       	cpc	r20, r1
     fde:	51 05       	cpc	r21, r1
     fe0:	b1 f0       	breq	.+44     	; 0x100e <CDC_Device_SendByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe2:	81 81       	ldd	r24, Z+1	; 0x01
     fe4:	8f 70       	andi	r24, 0x0F	; 15
     fe6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fea:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     fee:	85 fd       	sbrc	r24, 5
     ff0:	0a c0       	rjmp	.+20     	; 0x1006 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff2:	80 91 e8 00 	lds	r24, 0x00E8
     ff6:	8e 77       	andi	r24, 0x7E	; 126
     ff8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ffc:	69 83       	std	Y+1, r22	; 0x01
     ffe:	f8 db       	rcall	.-2064   	; 0x7f0 <Endpoint_WaitUntilReady>
    1000:	69 81       	ldd	r22, Y+1	; 0x01
    1002:	88 23       	and	r24, r24
    1004:	29 f4       	brne	.+10     	; 0x1010 <CDC_Device_SendByte+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1006:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <CDC_Device_SendByte+0x54>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    100e:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1018:	28 2f       	mov	r18, r24
    101a:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    101c:	84 85       	ldd	r24, Z+12	; 0x0c
    101e:	95 85       	ldd	r25, Z+13	; 0x0d
    1020:	62 2f       	mov	r22, r18
    1022:	cc df       	rcall	.-104    	; 0xfbc <CDC_Device_SendByte>
    1024:	88 23       	and	r24, r24
    1026:	19 f0       	breq	.+6      	; 0x102e <CDC_Device_putchar+0x16>
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <CDC_Device_putchar+0x1a>
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
}
    1032:	c9 01       	movw	r24, r18
    1034:	08 95       	ret

00001036 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1036:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1038:	80 91 63 01 	lds	r24, 0x0163
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	51 f5       	brne	.+84     	; 0x1094 <CDC_Device_Flush+0x5e>
    1040:	24 89       	ldd	r18, Z+20	; 0x14
    1042:	35 89       	ldd	r19, Z+21	; 0x15
    1044:	46 89       	ldd	r20, Z+22	; 0x16
    1046:	57 89       	ldd	r21, Z+23	; 0x17
    1048:	21 15       	cp	r18, r1
    104a:	31 05       	cpc	r19, r1
    104c:	41 05       	cpc	r20, r1
    104e:	51 05       	cpc	r21, r1
    1050:	09 f1       	breq	.+66     	; 0x1094 <CDC_Device_Flush+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	8f 70       	andi	r24, 0x0F	; 15
    1056:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    105a:	90 91 f3 00 	lds	r25, 0x00F3
    105e:	80 91 f2 00 	lds	r24, 0x00F2
    1062:	39 2f       	mov	r19, r25
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	82 2b       	or	r24, r18
    106a:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	a1 f0       	breq	.+40     	; 0x1098 <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1070:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1074:	80 91 e8 00 	lds	r24, 0x00E8
    1078:	8e 77       	andi	r24, 0x7E	; 126
    107a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    107e:	95 fd       	sbrc	r25, 5
    1080:	0d c0       	rjmp	.+26     	; 0x109c <CDC_Device_Flush+0x66>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1082:	b6 db       	rcall	.-2196   	; 0x7f0 <Endpoint_WaitUntilReady>
    1084:	88 23       	and	r24, r24
    1086:	59 f4       	brne	.+22     	; 0x109e <CDC_Device_Flush+0x68>
    1088:	90 91 e8 00 	lds	r25, 0x00E8
    108c:	9e 77       	andi	r25, 0x7E	; 126
    108e:	90 93 e8 00 	sts	0x00E8, r25
    1092:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    109c:	80 e0       	ldi	r24, 0x00	; 0
}
    109e:	08 95       	ret

000010a0 <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10a0:	20 91 63 01 	lds	r18, 0x0163
    10a4:	24 30       	cpi	r18, 0x04	; 4
    10a6:	99 f4       	brne	.+38     	; 0x10ce <CDC_Device_USBTask+0x2e>
    10a8:	fc 01       	movw	r30, r24
    10aa:	24 89       	ldd	r18, Z+20	; 0x14
    10ac:	35 89       	ldd	r19, Z+21	; 0x15
    10ae:	46 89       	ldd	r20, Z+22	; 0x16
    10b0:	57 89       	ldd	r21, Z+23	; 0x17
    10b2:	21 15       	cp	r18, r1
    10b4:	31 05       	cpc	r19, r1
    10b6:	41 05       	cpc	r20, r1
    10b8:	51 05       	cpc	r21, r1
    10ba:	49 f0       	breq	.+18     	; 0x10ce <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10bc:	21 81       	ldd	r18, Z+1	; 0x01
    10be:	2f 70       	andi	r18, 0x0F	; 15
    10c0:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10c4:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    10c8:	20 ff       	sbrs	r18, 0
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    10cc:	b4 cf       	rjmp	.-152    	; 0x1036 <CDC_Device_Flush>
    10ce:	08 95       	ret

000010d0 <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10d0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10d2:	80 91 63 01 	lds	r24, 0x0163
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	61 f5       	brne	.+88     	; 0x1132 <CDC_Device_BytesReceived+0x62>
    10da:	24 89       	ldd	r18, Z+20	; 0x14
    10dc:	35 89       	ldd	r19, Z+21	; 0x15
    10de:	46 89       	ldd	r20, Z+22	; 0x16
    10e0:	57 89       	ldd	r21, Z+23	; 0x17
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	41 05       	cpc	r20, r1
    10e8:	51 05       	cpc	r21, r1
    10ea:	19 f1       	breq	.+70     	; 0x1132 <CDC_Device_BytesReceived+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10ec:	86 81       	ldd	r24, Z+6	; 0x06
    10ee:	8f 70       	andi	r24, 0x0F	; 15
    10f0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10f4:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    10f8:	82 ff       	sbrs	r24, 2
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <CDC_Device_BytesReceived+0x62>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    10fc:	90 91 f3 00 	lds	r25, 0x00F3
    1100:	80 91 f2 00 	lds	r24, 0x00F2
    1104:	39 2f       	mov	r19, r25
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	82 2b       	or	r24, r18
    110c:	93 2b       	or	r25, r19
	{
		if (!(Endpoint_BytesInEndpoint()))
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	31 f4       	brne	.+12     	; 0x111e <CDC_Device_BytesReceived+0x4e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1112:	80 91 e8 00 	lds	r24, 0x00E8
    1116:	8b 77       	andi	r24, 0x7B	; 123
    1118:	80 93 e8 00 	sts	0x00E8, r24
    111c:	0a c0       	rjmp	.+20     	; 0x1132 <CDC_Device_BytesReceived+0x62>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    111e:	30 91 f3 00 	lds	r19, 0x00F3
    1122:	20 91 f2 00 	lds	r18, 0x00F2
    1126:	93 2f       	mov	r25, r19
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	28 2b       	or	r18, r24
    112e:	39 2b       	or	r19, r25
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <CDC_Device_BytesReceived+0x66>
		}
	}
	else
	{
		return 0;
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    1136:	c9 01       	movw	r24, r18
    1138:	08 95       	ret

0000113a <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    113a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    113c:	80 91 63 01 	lds	r24, 0x0163
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	99 f5       	brne	.+102    	; 0x11aa <CDC_Device_ReceiveByte+0x70>
    1144:	24 89       	ldd	r18, Z+20	; 0x14
    1146:	35 89       	ldd	r19, Z+21	; 0x15
    1148:	46 89       	ldd	r20, Z+22	; 0x16
    114a:	57 89       	ldd	r21, Z+23	; 0x17
    114c:	21 15       	cp	r18, r1
    114e:	31 05       	cpc	r19, r1
    1150:	41 05       	cpc	r20, r1
    1152:	51 05       	cpc	r21, r1
    1154:	51 f1       	breq	.+84     	; 0x11aa <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1156:	86 81       	ldd	r24, Z+6	; 0x06
    1158:	8f 70       	andi	r24, 0x0F	; 15
    115a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    115e:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1162:	82 ff       	sbrs	r24, 2
    1164:	22 c0       	rjmp	.+68     	; 0x11aa <CDC_Device_ReceiveByte+0x70>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1166:	90 91 f3 00 	lds	r25, 0x00F3
    116a:	80 91 f2 00 	lds	r24, 0x00F2
    116e:	39 2f       	mov	r19, r25
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	82 2b       	or	r24, r18
    1176:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	21 f0       	breq	.+8      	; 0x1184 <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    117c:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <CDC_Device_ReceiveByte+0x4e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1188:	90 91 f3 00 	lds	r25, 0x00F3
    118c:	80 91 f2 00 	lds	r24, 0x00F2
    1190:	59 2f       	mov	r21, r25
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	84 2b       	or	r24, r20
    1198:	95 2b       	or	r25, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	41 f4       	brne	.+16     	; 0x11ae <CDC_Device_ReceiveByte+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    119e:	80 91 e8 00 	lds	r24, 0x00E8
    11a2:	8b 77       	andi	r24, 0x7B	; 123
    11a4:	80 93 e8 00 	sts	0x00E8, r24
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <CDC_Device_ReceiveByte+0x74>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    11aa:	2f ef       	ldi	r18, 0xFF	; 255
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    11ae:	c9 01       	movw	r24, r18
    11b0:	08 95       	ret

000011b2 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    11b2:	fc 01       	movw	r30, r24
    11b4:	84 85       	ldd	r24, Z+12	; 0x0c
    11b6:	95 85       	ldd	r25, Z+13	; 0x0d
    11b8:	c0 df       	rcall	.-128    	; 0x113a <CDC_Device_ReceiveByte>
    11ba:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    11bc:	97 ff       	sbrs	r25, 7
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <CDC_Device_getchar+0x12>
	  return _FDEV_EOF;
    11c0:	2e ef       	ldi	r18, 0xFE	; 254
    11c2:	3f ef       	ldi	r19, 0xFF	; 255

	return ReceivedByte;
}
    11c4:	c9 01       	movw	r24, r18
    11c6:	08 95       	ret

000011c8 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    11c8:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    11ca:	2e e0       	ldi	r18, 0x0E	; 14
    11cc:	db 01       	movw	r26, r22
    11ce:	1d 92       	st	X+, r1
    11d0:	2a 95       	dec	r18
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <CDC_Device_CreateStream+0x6>
    11d4:	23 e0       	ldi	r18, 0x03	; 3
    11d6:	23 83       	std	Z+3, r18	; 0x03
    11d8:	2c e0       	ldi	r18, 0x0C	; 12
    11da:	38 e0       	ldi	r19, 0x08	; 8
    11dc:	31 87       	std	Z+9, r19	; 0x09
    11de:	20 87       	std	Z+8, r18	; 0x08
    11e0:	29 ed       	ldi	r18, 0xD9	; 217
    11e2:	38 e0       	ldi	r19, 0x08	; 8
    11e4:	33 87       	std	Z+11, r19	; 0x0b
    11e6:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    11e8:	95 87       	std	Z+13, r25	; 0x0d
    11ea:	84 87       	std	Z+12, r24	; 0x0c
}
    11ec:	08 95       	ret

000011ee <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    11ee:	08 95       	ret

000011f0 <vfprintf>:
    11f0:	a3 e1       	ldi	r26, 0x13	; 19
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee ef       	ldi	r30, 0xFE	; 254
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__prologue_saves__>
    11fc:	6c 01       	movw	r12, r24
    11fe:	7f 87       	std	Y+15, r23	; 0x0f
    1200:	6e 87       	std	Y+14, r22	; 0x0e
    1202:	fc 01       	movw	r30, r24
    1204:	17 82       	std	Z+7, r1	; 0x07
    1206:	16 82       	std	Z+6, r1	; 0x06
    1208:	83 81       	ldd	r24, Z+3	; 0x03
    120a:	81 fd       	sbrc	r24, 1
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <vfprintf+0x26>
    120e:	59 c3       	rjmp	.+1714   	; 0x18c2 <vfprintf+0x6d2>
    1210:	4c 85       	ldd	r20, Y+12	; 0x0c
    1212:	5d 85       	ldd	r21, Y+13	; 0x0d
    1214:	04 c0       	rjmp	.+8      	; 0x121e <vfprintf+0x2e>
    1216:	1e 01       	movw	r2, r28
    1218:	08 94       	sec
    121a:	21 1c       	adc	r2, r1
    121c:	31 1c       	adc	r3, r1
    121e:	f6 01       	movw	r30, r12
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	ee 85       	ldd	r30, Y+14	; 0x0e
    1224:	ff 85       	ldd	r31, Y+15	; 0x0f
    1226:	93 fd       	sbrc	r25, 3
    1228:	85 91       	lpm	r24, Z+
    122a:	93 ff       	sbrs	r25, 3
    122c:	81 91       	ld	r24, Z+
    122e:	ff 87       	std	Y+15, r31	; 0x0f
    1230:	ee 87       	std	Y+14, r30	; 0x0e
    1232:	88 23       	and	r24, r24
    1234:	09 f4       	brne	.+2      	; 0x1238 <vfprintf+0x48>
    1236:	41 c3       	rjmp	.+1666   	; 0x18ba <vfprintf+0x6ca>
    1238:	85 32       	cpi	r24, 0x25	; 37
    123a:	41 f4       	brne	.+16     	; 0x124c <vfprintf+0x5c>
    123c:	93 fd       	sbrc	r25, 3
    123e:	85 91       	lpm	r24, Z+
    1240:	93 ff       	sbrs	r25, 3
    1242:	81 91       	ld	r24, Z+
    1244:	ff 87       	std	Y+15, r31	; 0x0f
    1246:	ee 87       	std	Y+14, r30	; 0x0e
    1248:	85 32       	cpi	r24, 0x25	; 37
    124a:	59 f4       	brne	.+22     	; 0x1262 <vfprintf+0x72>
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	b6 01       	movw	r22, r12
    1250:	4a 8b       	std	Y+18, r20	; 0x12
    1252:	5b 8b       	std	Y+19, r21	; 0x13
    1254:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    1258:	4a 89       	ldd	r20, Y+18	; 0x12
    125a:	5b 89       	ldd	r21, Y+19	; 0x13
    125c:	5d 87       	std	Y+13, r21	; 0x0d
    125e:	4c 87       	std	Y+12, r20	; 0x0c
    1260:	d7 cf       	rjmp	.-82     	; 0x1210 <vfprintf+0x20>
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	ff 24       	eor	r15, r15
    1266:	00 e0       	ldi	r16, 0x00	; 0
    1268:	00 32       	cpi	r16, 0x20	; 32
    126a:	b0 f4       	brcc	.+44     	; 0x1298 <vfprintf+0xa8>
    126c:	8b 32       	cpi	r24, 0x2B	; 43
    126e:	69 f0       	breq	.+26     	; 0x128a <vfprintf+0x9a>
    1270:	8c 32       	cpi	r24, 0x2C	; 44
    1272:	28 f4       	brcc	.+10     	; 0x127e <vfprintf+0x8e>
    1274:	80 32       	cpi	r24, 0x20	; 32
    1276:	51 f0       	breq	.+20     	; 0x128c <vfprintf+0x9c>
    1278:	83 32       	cpi	r24, 0x23	; 35
    127a:	71 f4       	brne	.+28     	; 0x1298 <vfprintf+0xa8>
    127c:	0b c0       	rjmp	.+22     	; 0x1294 <vfprintf+0xa4>
    127e:	8d 32       	cpi	r24, 0x2D	; 45
    1280:	39 f0       	breq	.+14     	; 0x1290 <vfprintf+0xa0>
    1282:	80 33       	cpi	r24, 0x30	; 48
    1284:	49 f4       	brne	.+18     	; 0x1298 <vfprintf+0xa8>
    1286:	01 60       	ori	r16, 0x01	; 1
    1288:	2c c0       	rjmp	.+88     	; 0x12e2 <vfprintf+0xf2>
    128a:	02 60       	ori	r16, 0x02	; 2
    128c:	04 60       	ori	r16, 0x04	; 4
    128e:	29 c0       	rjmp	.+82     	; 0x12e2 <vfprintf+0xf2>
    1290:	08 60       	ori	r16, 0x08	; 8
    1292:	27 c0       	rjmp	.+78     	; 0x12e2 <vfprintf+0xf2>
    1294:	00 61       	ori	r16, 0x10	; 16
    1296:	25 c0       	rjmp	.+74     	; 0x12e2 <vfprintf+0xf2>
    1298:	07 fd       	sbrc	r16, 7
    129a:	2e c0       	rjmp	.+92     	; 0x12f8 <vfprintf+0x108>
    129c:	28 2f       	mov	r18, r24
    129e:	20 53       	subi	r18, 0x30	; 48
    12a0:	2a 30       	cpi	r18, 0x0A	; 10
    12a2:	98 f4       	brcc	.+38     	; 0x12ca <vfprintf+0xda>
    12a4:	06 ff       	sbrs	r16, 6
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <vfprintf+0xc8>
    12a8:	81 2f       	mov	r24, r17
    12aa:	88 0f       	add	r24, r24
    12ac:	18 2f       	mov	r17, r24
    12ae:	11 0f       	add	r17, r17
    12b0:	11 0f       	add	r17, r17
    12b2:	18 0f       	add	r17, r24
    12b4:	12 0f       	add	r17, r18
    12b6:	15 c0       	rjmp	.+42     	; 0x12e2 <vfprintf+0xf2>
    12b8:	8f 2d       	mov	r24, r15
    12ba:	88 0f       	add	r24, r24
    12bc:	f8 2e       	mov	r15, r24
    12be:	ff 0c       	add	r15, r15
    12c0:	ff 0c       	add	r15, r15
    12c2:	f8 0e       	add	r15, r24
    12c4:	f2 0e       	add	r15, r18
    12c6:	00 62       	ori	r16, 0x20	; 32
    12c8:	0c c0       	rjmp	.+24     	; 0x12e2 <vfprintf+0xf2>
    12ca:	8e 32       	cpi	r24, 0x2E	; 46
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <vfprintf+0xe6>
    12ce:	06 fd       	sbrc	r16, 6
    12d0:	f4 c2       	rjmp	.+1512   	; 0x18ba <vfprintf+0x6ca>
    12d2:	00 64       	ori	r16, 0x40	; 64
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0xf2>
    12d6:	8c 36       	cpi	r24, 0x6C	; 108
    12d8:	11 f4       	brne	.+4      	; 0x12de <vfprintf+0xee>
    12da:	00 68       	ori	r16, 0x80	; 128
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <vfprintf+0xf2>
    12de:	88 36       	cpi	r24, 0x68	; 104
    12e0:	59 f4       	brne	.+22     	; 0x12f8 <vfprintf+0x108>
    12e2:	ee 85       	ldd	r30, Y+14	; 0x0e
    12e4:	ff 85       	ldd	r31, Y+15	; 0x0f
    12e6:	93 fd       	sbrc	r25, 3
    12e8:	85 91       	lpm	r24, Z+
    12ea:	93 ff       	sbrs	r25, 3
    12ec:	81 91       	ld	r24, Z+
    12ee:	ff 87       	std	Y+15, r31	; 0x0f
    12f0:	ee 87       	std	Y+14, r30	; 0x0e
    12f2:	88 23       	and	r24, r24
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <vfprintf+0x108>
    12f6:	b8 cf       	rjmp	.-144    	; 0x1268 <vfprintf+0x78>
    12f8:	98 2f       	mov	r25, r24
    12fa:	95 54       	subi	r25, 0x45	; 69
    12fc:	93 30       	cpi	r25, 0x03	; 3
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <vfprintf+0x116>
    1300:	00 61       	ori	r16, 0x10	; 16
    1302:	80 5e       	subi	r24, 0xE0	; 224
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <vfprintf+0x122>
    1306:	98 2f       	mov	r25, r24
    1308:	95 56       	subi	r25, 0x65	; 101
    130a:	93 30       	cpi	r25, 0x03	; 3
    130c:	08 f0       	brcs	.+2      	; 0x1310 <vfprintf+0x120>
    130e:	91 c1       	rjmp	.+802    	; 0x1632 <vfprintf+0x442>
    1310:	0f 7e       	andi	r16, 0xEF	; 239
    1312:	06 ff       	sbrs	r16, 6
    1314:	16 e0       	ldi	r17, 0x06	; 6
    1316:	6f e3       	ldi	r22, 0x3F	; 63
    1318:	e6 2e       	mov	r14, r22
    131a:	e0 22       	and	r14, r16
    131c:	85 36       	cpi	r24, 0x65	; 101
    131e:	19 f4       	brne	.+6      	; 0x1326 <vfprintf+0x136>
    1320:	f0 e4       	ldi	r31, 0x40	; 64
    1322:	ef 2a       	or	r14, r31
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <vfprintf+0x144>
    1326:	86 36       	cpi	r24, 0x66	; 102
    1328:	19 f4       	brne	.+6      	; 0x1330 <vfprintf+0x140>
    132a:	20 e8       	ldi	r18, 0x80	; 128
    132c:	e2 2a       	or	r14, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0x144>
    1330:	11 11       	cpse	r17, r1
    1332:	11 50       	subi	r17, 0x01	; 1
    1334:	e7 fe       	sbrs	r14, 7
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <vfprintf+0x154>
    1338:	1c 33       	cpi	r17, 0x3C	; 60
    133a:	40 f4       	brcc	.+16     	; 0x134c <vfprintf+0x15c>
    133c:	91 2e       	mov	r9, r17
    133e:	93 94       	inc	r9
    1340:	27 e0       	ldi	r18, 0x07	; 7
    1342:	0b c0       	rjmp	.+22     	; 0x135a <vfprintf+0x16a>
    1344:	18 30       	cpi	r17, 0x08	; 8
    1346:	30 f4       	brcc	.+12     	; 0x1354 <vfprintf+0x164>
    1348:	21 2f       	mov	r18, r17
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <vfprintf+0x168>
    134c:	27 e0       	ldi	r18, 0x07	; 7
    134e:	3c e3       	ldi	r19, 0x3C	; 60
    1350:	93 2e       	mov	r9, r19
    1352:	03 c0       	rjmp	.+6      	; 0x135a <vfprintf+0x16a>
    1354:	27 e0       	ldi	r18, 0x07	; 7
    1356:	17 e0       	ldi	r17, 0x07	; 7
    1358:	99 24       	eor	r9, r9
    135a:	ca 01       	movw	r24, r20
    135c:	04 96       	adiw	r24, 0x04	; 4
    135e:	9d 87       	std	Y+13, r25	; 0x0d
    1360:	8c 87       	std	Y+12, r24	; 0x0c
    1362:	fa 01       	movw	r30, r20
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	a1 01       	movw	r20, r2
    136e:	09 2d       	mov	r16, r9
    1370:	a1 d7       	rcall	.+3906   	; 0x22b4 <__ftoa_engine>
    1372:	5c 01       	movw	r10, r24
    1374:	69 80       	ldd	r6, Y+1	; 0x01
    1376:	26 2d       	mov	r18, r6
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	39 8b       	std	Y+17, r19	; 0x11
    137c:	28 8b       	std	Y+16, r18	; 0x10
    137e:	60 fe       	sbrs	r6, 0
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <vfprintf+0x198>
    1382:	38 89       	ldd	r19, Y+16	; 0x10
    1384:	33 ff       	sbrs	r19, 3
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0x1a4>
    1388:	e1 fc       	sbrc	r14, 1
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <vfprintf+0x1a8>
    138c:	e2 fe       	sbrs	r14, 2
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x1ac>
    1390:	00 e2       	ldi	r16, 0x20	; 32
    1392:	05 c0       	rjmp	.+10     	; 0x139e <vfprintf+0x1ae>
    1394:	0d e2       	ldi	r16, 0x2D	; 45
    1396:	03 c0       	rjmp	.+6      	; 0x139e <vfprintf+0x1ae>
    1398:	0b e2       	ldi	r16, 0x2B	; 43
    139a:	01 c0       	rjmp	.+2      	; 0x139e <vfprintf+0x1ae>
    139c:	00 e0       	ldi	r16, 0x00	; 0
    139e:	88 89       	ldd	r24, Y+16	; 0x10
    13a0:	99 89       	ldd	r25, Y+17	; 0x11
    13a2:	8c 70       	andi	r24, 0x0C	; 12
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	c1 f1       	breq	.+112    	; 0x141a <vfprintf+0x22a>
    13aa:	00 23       	and	r16, r16
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <vfprintf+0x1c2>
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <vfprintf+0x1c4>
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	8f 15       	cp	r24, r15
    13b6:	58 f4       	brcc	.+22     	; 0x13ce <vfprintf+0x1de>
    13b8:	f8 1a       	sub	r15, r24
    13ba:	e3 fc       	sbrc	r14, 3
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <vfprintf+0x1e0>
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	b6 01       	movw	r22, r12
    13c4:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    13c8:	fa 94       	dec	r15
    13ca:	c9 f7       	brne	.-14     	; 0x13be <vfprintf+0x1ce>
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <vfprintf+0x1e0>
    13ce:	ff 24       	eor	r15, r15
    13d0:	00 23       	and	r16, r16
    13d2:	29 f0       	breq	.+10     	; 0x13de <vfprintf+0x1ee>
    13d4:	80 2f       	mov	r24, r16
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	b6 01       	movw	r22, r12
    13da:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    13de:	88 89       	ldd	r24, Y+16	; 0x10
    13e0:	83 fd       	sbrc	r24, 3
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <vfprintf+0x1fa>
    13e4:	0c e3       	ldi	r16, 0x3C	; 60
    13e6:	11 e0       	ldi	r17, 0x01	; 1
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <vfprintf+0x216>
    13ea:	08 e3       	ldi	r16, 0x38	; 56
    13ec:	11 e0       	ldi	r17, 0x01	; 1
    13ee:	0b c0       	rjmp	.+22     	; 0x1406 <vfprintf+0x216>
    13f0:	a1 14       	cp	r10, r1
    13f2:	b1 04       	cpc	r11, r1
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <vfprintf+0x208>
    13f6:	80 52       	subi	r24, 0x20	; 32
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	b6 01       	movw	r22, r12
    13fc:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    1400:	0f 5f       	subi	r16, 0xFF	; 255
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <vfprintf+0x220>
    1406:	ae 2c       	mov	r10, r14
    1408:	bb 24       	eor	r11, r11
    140a:	90 e1       	ldi	r25, 0x10	; 16
    140c:	a9 22       	and	r10, r25
    140e:	bb 24       	eor	r11, r11
    1410:	f8 01       	movw	r30, r16
    1412:	84 91       	lpm	r24, Z+
    1414:	88 23       	and	r24, r24
    1416:	61 f7       	brne	.-40     	; 0x13f0 <vfprintf+0x200>
    1418:	4d c2       	rjmp	.+1178   	; 0x18b4 <vfprintf+0x6c4>
    141a:	e7 fe       	sbrs	r14, 7
    141c:	0e c0       	rjmp	.+28     	; 0x143a <vfprintf+0x24a>
    141e:	9a 0c       	add	r9, r10
    1420:	f8 89       	ldd	r31, Y+16	; 0x10
    1422:	f4 ff       	sbrs	r31, 4
    1424:	04 c0       	rjmp	.+8      	; 0x142e <vfprintf+0x23e>
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	81 33       	cpi	r24, 0x31	; 49
    142a:	09 f4       	brne	.+2      	; 0x142e <vfprintf+0x23e>
    142c:	9a 94       	dec	r9
    142e:	19 14       	cp	r1, r9
    1430:	54 f5       	brge	.+84     	; 0x1486 <vfprintf+0x296>
    1432:	29 2d       	mov	r18, r9
    1434:	29 30       	cpi	r18, 0x09	; 9
    1436:	50 f5       	brcc	.+84     	; 0x148c <vfprintf+0x29c>
    1438:	2d c0       	rjmp	.+90     	; 0x1494 <vfprintf+0x2a4>
    143a:	e6 fc       	sbrc	r14, 6
    143c:	2b c0       	rjmp	.+86     	; 0x1494 <vfprintf+0x2a4>
    143e:	81 2f       	mov	r24, r17
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	8a 15       	cp	r24, r10
    1444:	9b 05       	cpc	r25, r11
    1446:	4c f0       	brlt	.+18     	; 0x145a <vfprintf+0x26a>
    1448:	3c ef       	ldi	r19, 0xFC	; 252
    144a:	a3 16       	cp	r10, r19
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	b3 06       	cpc	r11, r19
    1450:	24 f0       	brlt	.+8      	; 0x145a <vfprintf+0x26a>
    1452:	80 e8       	ldi	r24, 0x80	; 128
    1454:	e8 2a       	or	r14, r24
    1456:	01 c0       	rjmp	.+2      	; 0x145a <vfprintf+0x26a>
    1458:	11 50       	subi	r17, 0x01	; 1
    145a:	11 23       	and	r17, r17
    145c:	49 f0       	breq	.+18     	; 0x1470 <vfprintf+0x280>
    145e:	e2 e0       	ldi	r30, 0x02	; 2
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	ec 0f       	add	r30, r28
    1464:	fd 1f       	adc	r31, r29
    1466:	e1 0f       	add	r30, r17
    1468:	f1 1d       	adc	r31, r1
    146a:	80 81       	ld	r24, Z
    146c:	80 33       	cpi	r24, 0x30	; 48
    146e:	a1 f3       	breq	.-24     	; 0x1458 <vfprintf+0x268>
    1470:	e7 fe       	sbrs	r14, 7
    1472:	10 c0       	rjmp	.+32     	; 0x1494 <vfprintf+0x2a4>
    1474:	91 2e       	mov	r9, r17
    1476:	93 94       	inc	r9
    1478:	81 2f       	mov	r24, r17
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a8 16       	cp	r10, r24
    147e:	b9 06       	cpc	r11, r25
    1480:	44 f4       	brge	.+16     	; 0x1492 <vfprintf+0x2a2>
    1482:	1a 19       	sub	r17, r10
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <vfprintf+0x2a4>
    1486:	99 24       	eor	r9, r9
    1488:	93 94       	inc	r9
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <vfprintf+0x2a4>
    148c:	98 e0       	ldi	r25, 0x08	; 8
    148e:	99 2e       	mov	r9, r25
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <vfprintf+0x2a4>
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	e7 fe       	sbrs	r14, 7
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <vfprintf+0x2b6>
    1498:	1a 14       	cp	r1, r10
    149a:	1b 04       	cpc	r1, r11
    149c:	3c f4       	brge	.+14     	; 0x14ac <vfprintf+0x2bc>
    149e:	95 01       	movw	r18, r10
    14a0:	2f 5f       	subi	r18, 0xFF	; 255
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <vfprintf+0x2c0>
    14a6:	25 e0       	ldi	r18, 0x05	; 5
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x2c0>
    14ac:	21 e0       	ldi	r18, 0x01	; 1
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	00 23       	and	r16, r16
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <vfprintf+0x2c8>
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	11 23       	and	r17, r17
    14ba:	29 f0       	breq	.+10     	; 0x14c6 <vfprintf+0x2d6>
    14bc:	81 2f       	mov	r24, r17
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	28 0f       	add	r18, r24
    14c4:	39 1f       	adc	r19, r25
    14c6:	8f 2d       	mov	r24, r15
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	28 17       	cp	r18, r24
    14cc:	39 07       	cpc	r19, r25
    14ce:	14 f4       	brge	.+4      	; 0x14d4 <vfprintf+0x2e4>
    14d0:	f2 1a       	sub	r15, r18
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <vfprintf+0x2e6>
    14d4:	ff 24       	eor	r15, r15
    14d6:	4e 2c       	mov	r4, r14
    14d8:	55 24       	eor	r5, r5
    14da:	c2 01       	movw	r24, r4
    14dc:	89 70       	andi	r24, 0x09	; 9
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	49 f4       	brne	.+18     	; 0x14f6 <vfprintf+0x306>
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <vfprintf+0x302>
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	b6 01       	movw	r22, r12
    14ec:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    14f0:	fa 94       	dec	r15
    14f2:	ff 20       	and	r15, r15
    14f4:	c1 f7       	brne	.-16     	; 0x14e6 <vfprintf+0x2f6>
    14f6:	00 23       	and	r16, r16
    14f8:	29 f0       	breq	.+10     	; 0x1504 <vfprintf+0x314>
    14fa:	80 2f       	mov	r24, r16
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	b6 01       	movw	r22, r12
    1500:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    1504:	43 fc       	sbrc	r4, 3
    1506:	09 c0       	rjmp	.+18     	; 0x151a <vfprintf+0x32a>
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <vfprintf+0x326>
    150a:	80 e3       	ldi	r24, 0x30	; 48
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	b6 01       	movw	r22, r12
    1510:	0e 94 a5 12 	call	0x254a	; 0x254a <fputc>
    1514:	fa 94       	dec	r15
    1516:	ff 20       	and	r15, r15
    1518:	c1 f7       	brne	.-16     	; 0x150a <vfprintf+0x31a>
    151a:	e7 fe       	sbrs	r14, 7
    151c:	44 c0       	rjmp	.+136    	; 0x15a6 <vfprintf+0x3b6>
    151e:	35 01       	movw	r6, r10
    1520:	b7 fe       	sbrs	r11, 7
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x338>
    1524:	66 24       	eor	r6, r6
    1526:	77 24       	eor	r7, r7
    1528:	25 01       	movw	r4, r10
    152a:	08 94       	sec
    152c:	41 1c       	adc	r4, r1
    152e:	51 1c       	adc	r5, r1
    1530:	46 18       	sub	r4, r6
    1532:	57 08       	sbc	r5, r7
    1534:	42 0c       	add	r4, r2
    1536:	53 1c       	adc	r5, r3
    1538:	f5 01       	movw	r30, r10
    153a:	e9 19       	sub	r30, r9
    153c:	f1 09       	sbc	r31, r1
    153e:	4f 01       	movw	r8, r30
    1540:	81 2f       	mov	r24, r17
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	00 27       	eor	r16, r16
    1546:	11 27       	eor	r17, r17
    1548:	08 1b       	sub	r16, r24
    154a:	19 0b       	sbc	r17, r25
    154c:	ff ef       	ldi	r31, 0xFF	; 255
    154e:	6f 16       	cp	r6, r31
    1550:	ff ef       	ldi	r31, 0xFF	; 255
    1552:	7f 06       	cpc	r7, r31
    1554:	21 f4       	brne	.+8      	; 0x155e <vfprintf+0x36e>
    1556:	8e e2       	ldi	r24, 0x2E	; 46
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	b6 01       	movw	r22, r12
    155c:	f6 d7       	rcall	.+4076   	; 0x254a <fputc>
    155e:	a6 14       	cp	r10, r6
    1560:	b7 04       	cpc	r11, r7
    1562:	34 f0       	brlt	.+12     	; 0x1570 <vfprintf+0x380>
    1564:	86 14       	cp	r8, r6
    1566:	97 04       	cpc	r9, r7
    1568:	1c f4       	brge	.+6      	; 0x1570 <vfprintf+0x380>
    156a:	f2 01       	movw	r30, r4
    156c:	80 81       	ld	r24, Z
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <vfprintf+0x382>
    1570:	80 e3       	ldi	r24, 0x30	; 48
    1572:	08 94       	sec
    1574:	61 08       	sbc	r6, r1
    1576:	71 08       	sbc	r7, r1
    1578:	08 94       	sec
    157a:	41 1c       	adc	r4, r1
    157c:	51 1c       	adc	r5, r1
    157e:	60 16       	cp	r6, r16
    1580:	71 06       	cpc	r7, r17
    1582:	24 f0       	brlt	.+8      	; 0x158c <vfprintf+0x39c>
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	b6 01       	movw	r22, r12
    1588:	e0 d7       	rcall	.+4032   	; 0x254a <fputc>
    158a:	e0 cf       	rjmp	.-64     	; 0x154c <vfprintf+0x35c>
    158c:	6a 14       	cp	r6, r10
    158e:	7b 04       	cpc	r7, r11
    1590:	41 f4       	brne	.+16     	; 0x15a2 <vfprintf+0x3b2>
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	96 33       	cpi	r25, 0x36	; 54
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <vfprintf+0x3b0>
    1598:	95 33       	cpi	r25, 0x35	; 53
    159a:	19 f4       	brne	.+6      	; 0x15a2 <vfprintf+0x3b2>
    159c:	f8 89       	ldd	r31, Y+16	; 0x10
    159e:	f4 ff       	sbrs	r31, 4
    15a0:	81 e3       	ldi	r24, 0x31	; 49
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	43 c0       	rjmp	.+134    	; 0x162c <vfprintf+0x43c>
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	81 33       	cpi	r24, 0x31	; 49
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <vfprintf+0x3c0>
    15ac:	2f ee       	ldi	r18, 0xEF	; 239
    15ae:	62 22       	and	r6, r18
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	b6 01       	movw	r22, r12
    15b4:	ca d7       	rcall	.+3988   	; 0x254a <fputc>
    15b6:	11 23       	and	r17, r17
    15b8:	79 f0       	breq	.+30     	; 0x15d8 <vfprintf+0x3e8>
    15ba:	8e e2       	ldi	r24, 0x2E	; 46
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	b6 01       	movw	r22, r12
    15c0:	c4 d7       	rcall	.+3976   	; 0x254a <fputc>
    15c2:	02 e0       	ldi	r16, 0x02	; 2
    15c4:	f1 01       	movw	r30, r2
    15c6:	e0 0f       	add	r30, r16
    15c8:	f1 1d       	adc	r31, r1
    15ca:	0f 5f       	subi	r16, 0xFF	; 255
    15cc:	80 81       	ld	r24, Z
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	b6 01       	movw	r22, r12
    15d2:	bb d7       	rcall	.+3958   	; 0x254a <fputc>
    15d4:	11 50       	subi	r17, 0x01	; 1
    15d6:	b1 f7       	brne	.-20     	; 0x15c4 <vfprintf+0x3d4>
    15d8:	44 fe       	sbrs	r4, 4
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <vfprintf+0x3f2>
    15dc:	85 e4       	ldi	r24, 0x45	; 69
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0x3f6>
    15e2:	85 e6       	ldi	r24, 0x65	; 101
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	b6 01       	movw	r22, r12
    15e8:	b0 d7       	rcall	.+3936   	; 0x254a <fputc>
    15ea:	b7 fc       	sbrc	r11, 7
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <vfprintf+0x408>
    15ee:	a1 14       	cp	r10, r1
    15f0:	b1 04       	cpc	r11, r1
    15f2:	41 f4       	brne	.+16     	; 0x1604 <vfprintf+0x414>
    15f4:	64 fe       	sbrs	r6, 4
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0x414>
    15f8:	b0 94       	com	r11
    15fa:	a1 94       	neg	r10
    15fc:	b1 08       	sbc	r11, r1
    15fe:	b3 94       	inc	r11
    1600:	8d e2       	ldi	r24, 0x2D	; 45
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <vfprintf+0x416>
    1604:	8b e2       	ldi	r24, 0x2B	; 43
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	b6 01       	movw	r22, r12
    160a:	9f d7       	rcall	.+3902   	; 0x254a <fputc>
    160c:	80 e3       	ldi	r24, 0x30	; 48
    160e:	05 c0       	rjmp	.+10     	; 0x161a <vfprintf+0x42a>
    1610:	8f 5f       	subi	r24, 0xFF	; 255
    1612:	e6 ef       	ldi	r30, 0xF6	; 246
    1614:	ff ef       	ldi	r31, 0xFF	; 255
    1616:	ae 0e       	add	r10, r30
    1618:	bf 1e       	adc	r11, r31
    161a:	fa e0       	ldi	r31, 0x0A	; 10
    161c:	af 16       	cp	r10, r31
    161e:	b1 04       	cpc	r11, r1
    1620:	bc f7       	brge	.-18     	; 0x1610 <vfprintf+0x420>
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	b6 01       	movw	r22, r12
    1626:	91 d7       	rcall	.+3874   	; 0x254a <fputc>
    1628:	c5 01       	movw	r24, r10
    162a:	c0 96       	adiw	r24, 0x30	; 48
    162c:	b6 01       	movw	r22, r12
    162e:	8d d7       	rcall	.+3866   	; 0x254a <fputc>
    1630:	41 c1       	rjmp	.+642    	; 0x18b4 <vfprintf+0x6c4>
    1632:	83 36       	cpi	r24, 0x63	; 99
    1634:	31 f0       	breq	.+12     	; 0x1642 <vfprintf+0x452>
    1636:	83 37       	cpi	r24, 0x73	; 115
    1638:	89 f0       	breq	.+34     	; 0x165c <vfprintf+0x46c>
    163a:	83 35       	cpi	r24, 0x53	; 83
    163c:	09 f0       	breq	.+2      	; 0x1640 <vfprintf+0x450>
    163e:	55 c0       	rjmp	.+170    	; 0x16ea <vfprintf+0x4fa>
    1640:	21 c0       	rjmp	.+66     	; 0x1684 <vfprintf+0x494>
    1642:	9a 01       	movw	r18, r20
    1644:	2e 5f       	subi	r18, 0xFE	; 254
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	3d 87       	std	Y+13, r19	; 0x0d
    164a:	2c 87       	std	Y+12, r18	; 0x0c
    164c:	fa 01       	movw	r30, r20
    164e:	80 81       	ld	r24, Z
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	31 01       	movw	r6, r2
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	a8 2e       	mov	r10, r24
    1658:	b1 2c       	mov	r11, r1
    165a:	12 c0       	rjmp	.+36     	; 0x1680 <vfprintf+0x490>
    165c:	9a 01       	movw	r18, r20
    165e:	2e 5f       	subi	r18, 0xFE	; 254
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	3d 87       	std	Y+13, r19	; 0x0d
    1664:	2c 87       	std	Y+12, r18	; 0x0c
    1666:	fa 01       	movw	r30, r20
    1668:	60 80       	ld	r6, Z
    166a:	71 80       	ldd	r7, Z+1	; 0x01
    166c:	06 ff       	sbrs	r16, 6
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x486>
    1670:	61 2f       	mov	r22, r17
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x48a>
    1676:	6f ef       	ldi	r22, 0xFF	; 255
    1678:	7f ef       	ldi	r23, 0xFF	; 255
    167a:	c3 01       	movw	r24, r6
    167c:	19 d7       	rcall	.+3634   	; 0x24b0 <strnlen>
    167e:	5c 01       	movw	r10, r24
    1680:	0f 77       	andi	r16, 0x7F	; 127
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <vfprintf+0x4ba>
    1684:	9a 01       	movw	r18, r20
    1686:	2e 5f       	subi	r18, 0xFE	; 254
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	3d 87       	std	Y+13, r19	; 0x0d
    168c:	2c 87       	std	Y+12, r18	; 0x0c
    168e:	fa 01       	movw	r30, r20
    1690:	60 80       	ld	r6, Z
    1692:	71 80       	ldd	r7, Z+1	; 0x01
    1694:	06 ff       	sbrs	r16, 6
    1696:	03 c0       	rjmp	.+6      	; 0x169e <vfprintf+0x4ae>
    1698:	61 2f       	mov	r22, r17
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <vfprintf+0x4b2>
    169e:	6f ef       	ldi	r22, 0xFF	; 255
    16a0:	7f ef       	ldi	r23, 0xFF	; 255
    16a2:	c3 01       	movw	r24, r6
    16a4:	fa d6       	rcall	.+3572   	; 0x249a <strnlen_P>
    16a6:	5c 01       	movw	r10, r24
    16a8:	00 68       	ori	r16, 0x80	; 128
    16aa:	03 fd       	sbrc	r16, 3
    16ac:	1a c0       	rjmp	.+52     	; 0x16e2 <vfprintf+0x4f2>
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <vfprintf+0x4ca>
    16b0:	80 e2       	ldi	r24, 0x20	; 32
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b6 01       	movw	r22, r12
    16b6:	49 d7       	rcall	.+3730   	; 0x254a <fputc>
    16b8:	fa 94       	dec	r15
    16ba:	8f 2d       	mov	r24, r15
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a8 16       	cp	r10, r24
    16c0:	b9 06       	cpc	r11, r25
    16c2:	b0 f3       	brcs	.-20     	; 0x16b0 <vfprintf+0x4c0>
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <vfprintf+0x4f2>
    16c6:	f3 01       	movw	r30, r6
    16c8:	07 fd       	sbrc	r16, 7
    16ca:	85 91       	lpm	r24, Z+
    16cc:	07 ff       	sbrs	r16, 7
    16ce:	81 91       	ld	r24, Z+
    16d0:	3f 01       	movw	r6, r30
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	b6 01       	movw	r22, r12
    16d6:	39 d7       	rcall	.+3698   	; 0x254a <fputc>
    16d8:	f1 10       	cpse	r15, r1
    16da:	fa 94       	dec	r15
    16dc:	08 94       	sec
    16de:	a1 08       	sbc	r10, r1
    16e0:	b1 08       	sbc	r11, r1
    16e2:	a1 14       	cp	r10, r1
    16e4:	b1 04       	cpc	r11, r1
    16e6:	79 f7       	brne	.-34     	; 0x16c6 <vfprintf+0x4d6>
    16e8:	e5 c0       	rjmp	.+458    	; 0x18b4 <vfprintf+0x6c4>
    16ea:	84 36       	cpi	r24, 0x64	; 100
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <vfprintf+0x502>
    16ee:	89 36       	cpi	r24, 0x69	; 105
    16f0:	59 f5       	brne	.+86     	; 0x1748 <vfprintf+0x558>
    16f2:	07 ff       	sbrs	r16, 7
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <vfprintf+0x51c>
    16f6:	9a 01       	movw	r18, r20
    16f8:	2c 5f       	subi	r18, 0xFC	; 252
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	3d 87       	std	Y+13, r19	; 0x0d
    16fe:	2c 87       	std	Y+12, r18	; 0x0c
    1700:	fa 01       	movw	r30, r20
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <vfprintf+0x534>
    170c:	9a 01       	movw	r18, r20
    170e:	2e 5f       	subi	r18, 0xFE	; 254
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	3d 87       	std	Y+13, r19	; 0x0d
    1714:	2c 87       	std	Y+12, r18	; 0x0c
    1716:	fa 01       	movw	r30, r20
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	88 27       	eor	r24, r24
    171e:	77 fd       	sbrc	r23, 7
    1720:	80 95       	com	r24
    1722:	98 2f       	mov	r25, r24
    1724:	0f 76       	andi	r16, 0x6F	; 111
    1726:	97 ff       	sbrs	r25, 7
    1728:	08 c0       	rjmp	.+16     	; 0x173a <vfprintf+0x54a>
    172a:	90 95       	com	r25
    172c:	80 95       	com	r24
    172e:	70 95       	com	r23
    1730:	61 95       	neg	r22
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	8f 4f       	sbci	r24, 0xFF	; 255
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	00 68       	ori	r16, 0x80	; 128
    173a:	a1 01       	movw	r20, r2
    173c:	2a e0       	ldi	r18, 0x0A	; 10
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	6e d7       	rcall	.+3804   	; 0x261e <__ultoa_invert>
    1742:	98 2e       	mov	r9, r24
    1744:	92 18       	sub	r9, r2
    1746:	40 c0       	rjmp	.+128    	; 0x17c8 <vfprintf+0x5d8>
    1748:	85 37       	cpi	r24, 0x75	; 117
    174a:	21 f4       	brne	.+8      	; 0x1754 <vfprintf+0x564>
    174c:	0f 7e       	andi	r16, 0xEF	; 239
    174e:	2a e0       	ldi	r18, 0x0A	; 10
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	20 c0       	rjmp	.+64     	; 0x1794 <vfprintf+0x5a4>
    1754:	09 7f       	andi	r16, 0xF9	; 249
    1756:	8f 36       	cpi	r24, 0x6F	; 111
    1758:	a9 f0       	breq	.+42     	; 0x1784 <vfprintf+0x594>
    175a:	80 37       	cpi	r24, 0x70	; 112
    175c:	20 f4       	brcc	.+8      	; 0x1766 <vfprintf+0x576>
    175e:	88 35       	cpi	r24, 0x58	; 88
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x574>
    1762:	ab c0       	rjmp	.+342    	; 0x18ba <vfprintf+0x6ca>
    1764:	0b c0       	rjmp	.+22     	; 0x177c <vfprintf+0x58c>
    1766:	80 37       	cpi	r24, 0x70	; 112
    1768:	21 f0       	breq	.+8      	; 0x1772 <vfprintf+0x582>
    176a:	88 37       	cpi	r24, 0x78	; 120
    176c:	09 f0       	breq	.+2      	; 0x1770 <vfprintf+0x580>
    176e:	a5 c0       	rjmp	.+330    	; 0x18ba <vfprintf+0x6ca>
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <vfprintf+0x584>
    1772:	00 61       	ori	r16, 0x10	; 16
    1774:	04 ff       	sbrs	r16, 4
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x59a>
    1778:	04 60       	ori	r16, 0x04	; 4
    177a:	07 c0       	rjmp	.+14     	; 0x178a <vfprintf+0x59a>
    177c:	04 ff       	sbrs	r16, 4
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x5a0>
    1780:	06 60       	ori	r16, 0x06	; 6
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <vfprintf+0x5a0>
    1784:	28 e0       	ldi	r18, 0x08	; 8
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <vfprintf+0x5a4>
    178a:	20 e1       	ldi	r18, 0x10	; 16
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <vfprintf+0x5a4>
    1790:	20 e1       	ldi	r18, 0x10	; 16
    1792:	32 e0       	ldi	r19, 0x02	; 2
    1794:	07 ff       	sbrs	r16, 7
    1796:	0a c0       	rjmp	.+20     	; 0x17ac <vfprintf+0x5bc>
    1798:	ca 01       	movw	r24, r20
    179a:	04 96       	adiw	r24, 0x04	; 4
    179c:	9d 87       	std	Y+13, r25	; 0x0d
    179e:	8c 87       	std	Y+12, r24	; 0x0c
    17a0:	fa 01       	movw	r30, r20
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x5ce>
    17ac:	ca 01       	movw	r24, r20
    17ae:	02 96       	adiw	r24, 0x02	; 2
    17b0:	9d 87       	std	Y+13, r25	; 0x0d
    17b2:	8c 87       	std	Y+12, r24	; 0x0c
    17b4:	fa 01       	movw	r30, r20
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a1 01       	movw	r20, r2
    17c0:	2e d7       	rcall	.+3676   	; 0x261e <__ultoa_invert>
    17c2:	98 2e       	mov	r9, r24
    17c4:	92 18       	sub	r9, r2
    17c6:	0f 77       	andi	r16, 0x7F	; 127
    17c8:	06 ff       	sbrs	r16, 6
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <vfprintf+0x5ee>
    17cc:	0e 7f       	andi	r16, 0xFE	; 254
    17ce:	91 16       	cp	r9, r17
    17d0:	30 f4       	brcc	.+12     	; 0x17de <vfprintf+0x5ee>
    17d2:	04 ff       	sbrs	r16, 4
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <vfprintf+0x5f2>
    17d6:	02 fd       	sbrc	r16, 2
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <vfprintf+0x5f2>
    17da:	0f 7e       	andi	r16, 0xEF	; 239
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x5f2>
    17de:	e9 2c       	mov	r14, r9
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <vfprintf+0x5f4>
    17e2:	e1 2e       	mov	r14, r17
    17e4:	80 2f       	mov	r24, r16
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	04 ff       	sbrs	r16, 4
    17ea:	0c c0       	rjmp	.+24     	; 0x1804 <vfprintf+0x614>
    17ec:	fe 01       	movw	r30, r28
    17ee:	e9 0d       	add	r30, r9
    17f0:	f1 1d       	adc	r31, r1
    17f2:	20 81       	ld	r18, Z
    17f4:	20 33       	cpi	r18, 0x30	; 48
    17f6:	11 f4       	brne	.+4      	; 0x17fc <vfprintf+0x60c>
    17f8:	09 7e       	andi	r16, 0xE9	; 233
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <vfprintf+0x61e>
    17fc:	e3 94       	inc	r14
    17fe:	02 ff       	sbrs	r16, 2
    1800:	06 c0       	rjmp	.+12     	; 0x180e <vfprintf+0x61e>
    1802:	04 c0       	rjmp	.+8      	; 0x180c <vfprintf+0x61c>
    1804:	86 78       	andi	r24, 0x86	; 134
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x61e>
    180c:	e3 94       	inc	r14
    180e:	a0 2e       	mov	r10, r16
    1810:	bb 24       	eor	r11, r11
    1812:	03 fd       	sbrc	r16, 3
    1814:	13 c0       	rjmp	.+38     	; 0x183c <vfprintf+0x64c>
    1816:	00 ff       	sbrs	r16, 0
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <vfprintf+0x646>
    181a:	ef 14       	cp	r14, r15
    181c:	28 f4       	brcc	.+10     	; 0x1828 <vfprintf+0x638>
    181e:	19 2d       	mov	r17, r9
    1820:	1f 0d       	add	r17, r15
    1822:	1e 19       	sub	r17, r14
    1824:	ef 2c       	mov	r14, r15
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <vfprintf+0x646>
    1828:	19 2d       	mov	r17, r9
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <vfprintf+0x646>
    182c:	80 e2       	ldi	r24, 0x20	; 32
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	b6 01       	movw	r22, r12
    1832:	8b d6       	rcall	.+3350   	; 0x254a <fputc>
    1834:	e3 94       	inc	r14
    1836:	ef 14       	cp	r14, r15
    1838:	c8 f3       	brcs	.-14     	; 0x182c <vfprintf+0x63c>
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <vfprintf+0x654>
    183c:	ef 14       	cp	r14, r15
    183e:	10 f4       	brcc	.+4      	; 0x1844 <vfprintf+0x654>
    1840:	fe 18       	sub	r15, r14
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <vfprintf+0x656>
    1844:	ff 24       	eor	r15, r15
    1846:	a4 fe       	sbrs	r10, 4
    1848:	0e c0       	rjmp	.+28     	; 0x1866 <vfprintf+0x676>
    184a:	80 e3       	ldi	r24, 0x30	; 48
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	b6 01       	movw	r22, r12
    1850:	7c d6       	rcall	.+3320   	; 0x254a <fputc>
    1852:	a2 fe       	sbrs	r10, 2
    1854:	1d c0       	rjmp	.+58     	; 0x1890 <vfprintf+0x6a0>
    1856:	a1 fe       	sbrs	r10, 1
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <vfprintf+0x670>
    185a:	88 e5       	ldi	r24, 0x58	; 88
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	10 c0       	rjmp	.+32     	; 0x1880 <vfprintf+0x690>
    1860:	88 e7       	ldi	r24, 0x78	; 120
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0d c0       	rjmp	.+26     	; 0x1880 <vfprintf+0x690>
    1866:	c5 01       	movw	r24, r10
    1868:	86 78       	andi	r24, 0x86	; 134
    186a:	90 70       	andi	r25, 0x00	; 0
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	81 f0       	breq	.+32     	; 0x1890 <vfprintf+0x6a0>
    1870:	a1 fc       	sbrc	r10, 1
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x688>
    1874:	80 e2       	ldi	r24, 0x20	; 32
    1876:	01 c0       	rjmp	.+2      	; 0x187a <vfprintf+0x68a>
    1878:	8b e2       	ldi	r24, 0x2B	; 43
    187a:	07 fd       	sbrc	r16, 7
    187c:	8d e2       	ldi	r24, 0x2D	; 45
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	b6 01       	movw	r22, r12
    1882:	63 d6       	rcall	.+3270   	; 0x254a <fputc>
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <vfprintf+0x6a0>
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	b6 01       	movw	r22, r12
    188c:	5e d6       	rcall	.+3260   	; 0x254a <fputc>
    188e:	11 50       	subi	r17, 0x01	; 1
    1890:	91 16       	cp	r9, r17
    1892:	c8 f3       	brcs	.-14     	; 0x1886 <vfprintf+0x696>
    1894:	9a 94       	dec	r9
    1896:	f1 01       	movw	r30, r2
    1898:	e9 0d       	add	r30, r9
    189a:	f1 1d       	adc	r31, r1
    189c:	80 81       	ld	r24, Z
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	b6 01       	movw	r22, r12
    18a2:	53 d6       	rcall	.+3238   	; 0x254a <fputc>
    18a4:	99 20       	and	r9, r9
    18a6:	b1 f7       	brne	.-20     	; 0x1894 <vfprintf+0x6a4>
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <vfprintf+0x6c4>
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	b6 01       	movw	r22, r12
    18b0:	4c d6       	rcall	.+3224   	; 0x254a <fputc>
    18b2:	fa 94       	dec	r15
    18b4:	ff 20       	and	r15, r15
    18b6:	c9 f7       	brne	.-14     	; 0x18aa <vfprintf+0x6ba>
    18b8:	ab cc       	rjmp	.-1706   	; 0x1210 <vfprintf+0x20>
    18ba:	f6 01       	movw	r30, r12
    18bc:	26 81       	ldd	r18, Z+6	; 0x06
    18be:	37 81       	ldd	r19, Z+7	; 0x07
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <vfprintf+0x6d6>
    18c2:	2f ef       	ldi	r18, 0xFF	; 255
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	c9 01       	movw	r24, r18
    18c8:	63 96       	adiw	r28, 0x13	; 19
    18ca:	e2 e1       	ldi	r30, 0x12	; 18
    18cc:	d8 c4       	rjmp	.+2480   	; 0x227e <__epilogue_restores__>

000018ce <putval>:
    18ce:	20 fd       	sbrc	r18, 0
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <putval+0x16>
    18d2:	fc 01       	movw	r30, r24
    18d4:	23 fd       	sbrc	r18, 3
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <putval+0x14>
    18d8:	22 ff       	sbrs	r18, 2
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <putval+0x12>
    18dc:	73 83       	std	Z+3, r23	; 0x03
    18de:	62 83       	std	Z+2, r22	; 0x02
    18e0:	51 83       	std	Z+1, r21	; 0x01
    18e2:	40 83       	st	Z, r20
    18e4:	08 95       	ret

000018e6 <mulacc>:
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	44 fd       	sbrc	r20, 4
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <mulacc+0x2c>
    18f2:	46 fd       	sbrc	r20, 6
    18f4:	10 c0       	rjmp	.+32     	; 0x1916 <mulacc+0x30>
    18f6:	db 01       	movw	r26, r22
    18f8:	fc 01       	movw	r30, r24
    18fa:	aa 0f       	add	r26, r26
    18fc:	bb 1f       	adc	r27, r27
    18fe:	ee 1f       	adc	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	10 94       	com	r1
    1904:	d1 f7       	brne	.-12     	; 0x18fa <mulacc+0x14>
    1906:	6a 0f       	add	r22, r26
    1908:	7b 1f       	adc	r23, r27
    190a:	8e 1f       	adc	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <mulacc+0x32>
    1912:	33 e0       	ldi	r19, 0x03	; 3
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <mulacc+0x32>
    1916:	34 e0       	ldi	r19, 0x04	; 4
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	31 50       	subi	r19, 0x01	; 1
    1922:	d1 f7       	brne	.-12     	; 0x1918 <mulacc+0x32>
    1924:	7b 01       	movw	r14, r22
    1926:	8c 01       	movw	r16, r24
    1928:	e2 0e       	add	r14, r18
    192a:	f1 1c       	adc	r15, r1
    192c:	01 1d       	adc	r16, r1
    192e:	11 1d       	adc	r17, r1
    1930:	a8 01       	movw	r20, r16
    1932:	97 01       	movw	r18, r14
    1934:	b7 01       	movw	r22, r14
    1936:	ca 01       	movw	r24, r20
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	08 95       	ret

00001942 <skip_spaces>:
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	8c 01       	movw	r16, r24
    1950:	c8 01       	movw	r24, r16
    1952:	b9 d5       	rcall	.+2930   	; 0x24c6 <fgetc>
    1954:	ec 01       	movw	r28, r24
    1956:	97 fd       	sbrc	r25, 7
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <skip_spaces+0x26>
    195a:	84 d5       	rcall	.+2824   	; 0x2464 <isspace>
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	c1 f7       	brne	.-16     	; 0x1950 <skip_spaces+0xe>
    1960:	7e 01       	movw	r14, r28
    1962:	ce 01       	movw	r24, r28
    1964:	b8 01       	movw	r22, r16
    1966:	40 d6       	rcall	.+3200   	; 0x25e8 <ungetc>
    1968:	ce 01       	movw	r24, r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	e6 e0       	ldi	r30, 0x06	; 6
    1970:	92 c4       	rjmp	.+2340   	; 0x2296 <__epilogue_restores__+0x18>

00001972 <conv_int>:
    1972:	a1 e0       	ldi	r26, 0x01	; 1
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ee eb       	ldi	r30, 0xBE	; 190
    1978:	fc e0       	ldi	r31, 0x0C	; 12
    197a:	6b c4       	rjmp	.+2262   	; 0x2252 <__prologue_saves__+0xc>
    197c:	6c 01       	movw	r12, r24
    197e:	4b 01       	movw	r8, r22
    1980:	5a 01       	movw	r10, r20
    1982:	12 2f       	mov	r17, r18
    1984:	a0 d5       	rcall	.+2880   	; 0x24c6 <fgetc>
    1986:	8b 32       	cpi	r24, 0x2B	; 43
    1988:	19 f0       	breq	.+6      	; 0x1990 <conv_int+0x1e>
    198a:	8d 32       	cpi	r24, 0x2D	; 45
    198c:	61 f4       	brne	.+24     	; 0x19a6 <conv_int+0x34>
    198e:	10 68       	ori	r17, 0x80	; 128
    1990:	08 94       	sec
    1992:	81 08       	sbc	r8, r1
    1994:	91 08       	sbc	r9, r1
    1996:	81 14       	cp	r8, r1
    1998:	91 04       	cpc	r9, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <conv_int+0x2c>
    199c:	71 c0       	rjmp	.+226    	; 0x1a80 <conv_int+0x10e>
    199e:	c6 01       	movw	r24, r12
    19a0:	92 d5       	rcall	.+2852   	; 0x24c6 <fgetc>
    19a2:	97 fd       	sbrc	r25, 7
    19a4:	6d c0       	rjmp	.+218    	; 0x1a80 <conv_int+0x10e>
    19a6:	31 2f       	mov	r19, r17
    19a8:	3d 7f       	andi	r19, 0xFD	; 253
    19aa:	23 2f       	mov	r18, r19
    19ac:	20 73       	andi	r18, 0x30	; 48
    19ae:	21 f5       	brne	.+72     	; 0x19f8 <conv_int+0x86>
    19b0:	80 33       	cpi	r24, 0x30	; 48
    19b2:	11 f5       	brne	.+68     	; 0x19f8 <conv_int+0x86>
    19b4:	08 94       	sec
    19b6:	81 08       	sbc	r8, r1
    19b8:	91 08       	sbc	r9, r1
    19ba:	81 14       	cp	r8, r1
    19bc:	91 04       	cpc	r9, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <conv_int+0x50>
    19c0:	4b c0       	rjmp	.+150    	; 0x1a58 <conv_int+0xe6>
    19c2:	c6 01       	movw	r24, r12
    19c4:	39 83       	std	Y+1, r19	; 0x01
    19c6:	7f d5       	rcall	.+2814   	; 0x24c6 <fgetc>
    19c8:	39 81       	ldd	r19, Y+1	; 0x01
    19ca:	97 fd       	sbrc	r25, 7
    19cc:	45 c0       	rjmp	.+138    	; 0x1a58 <conv_int+0xe6>
    19ce:	32 60       	ori	r19, 0x02	; 2
    19d0:	88 37       	cpi	r24, 0x78	; 120
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <conv_int+0x66>
    19d4:	88 35       	cpi	r24, 0x58	; 88
    19d6:	71 f4       	brne	.+28     	; 0x19f4 <conv_int+0x82>
    19d8:	30 64       	ori	r19, 0x40	; 64
    19da:	08 94       	sec
    19dc:	81 08       	sbc	r8, r1
    19de:	91 08       	sbc	r9, r1
    19e0:	81 14       	cp	r8, r1
    19e2:	91 04       	cpc	r9, r1
    19e4:	c9 f1       	breq	.+114    	; 0x1a58 <conv_int+0xe6>
    19e6:	c6 01       	movw	r24, r12
    19e8:	39 83       	std	Y+1, r19	; 0x01
    19ea:	6d d5       	rcall	.+2778   	; 0x24c6 <fgetc>
    19ec:	39 81       	ldd	r19, Y+1	; 0x01
    19ee:	97 ff       	sbrs	r25, 7
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <conv_int+0x86>
    19f2:	32 c0       	rjmp	.+100    	; 0x1a58 <conv_int+0xe6>
    19f4:	36 ff       	sbrs	r19, 6
    19f6:	30 61       	ori	r19, 0x10	; 16
    19f8:	ee 24       	eor	r14, r14
    19fa:	ff 24       	eor	r15, r15
    19fc:	87 01       	movw	r16, r14
    19fe:	28 2f       	mov	r18, r24
    1a00:	20 53       	subi	r18, 0x30	; 48
    1a02:	28 30       	cpi	r18, 0x08	; 8
    1a04:	88 f0       	brcs	.+34     	; 0x1a28 <conv_int+0xb6>
    1a06:	34 fd       	sbrc	r19, 4
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <conv_int+0xaa>
    1a0a:	2a 30       	cpi	r18, 0x0A	; 10
    1a0c:	68 f0       	brcs	.+26     	; 0x1a28 <conv_int+0xb6>
    1a0e:	36 ff       	sbrs	r19, 6
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <conv_int+0xaa>
    1a12:	2f 7d       	andi	r18, 0xDF	; 223
    1a14:	42 2f       	mov	r20, r18
    1a16:	41 51       	subi	r20, 0x11	; 17
    1a18:	46 30       	cpi	r20, 0x06	; 6
    1a1a:	28 f0       	brcs	.+10     	; 0x1a26 <conv_int+0xb4>
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	39 83       	std	Y+1, r19	; 0x01
    1a20:	e3 d5       	rcall	.+3014   	; 0x25e8 <ungetc>
    1a22:	39 81       	ldd	r19, Y+1	; 0x01
    1a24:	16 c0       	rjmp	.+44     	; 0x1a52 <conv_int+0xe0>
    1a26:	27 50       	subi	r18, 0x07	; 7
    1a28:	c8 01       	movw	r24, r16
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	43 2f       	mov	r20, r19
    1a2e:	39 83       	std	Y+1, r19	; 0x01
    1a30:	5a df       	rcall	.-332    	; 0x18e6 <mulacc>
    1a32:	7b 01       	movw	r14, r22
    1a34:	8c 01       	movw	r16, r24
    1a36:	39 81       	ldd	r19, Y+1	; 0x01
    1a38:	32 60       	ori	r19, 0x02	; 2
    1a3a:	08 94       	sec
    1a3c:	81 08       	sbc	r8, r1
    1a3e:	91 08       	sbc	r9, r1
    1a40:	81 14       	cp	r8, r1
    1a42:	91 04       	cpc	r9, r1
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <conv_int+0xec>
    1a46:	c6 01       	movw	r24, r12
    1a48:	39 83       	std	Y+1, r19	; 0x01
    1a4a:	3d d5       	rcall	.+2682   	; 0x24c6 <fgetc>
    1a4c:	39 81       	ldd	r19, Y+1	; 0x01
    1a4e:	97 ff       	sbrs	r25, 7
    1a50:	d6 cf       	rjmp	.-84     	; 0x19fe <conv_int+0x8c>
    1a52:	31 fd       	sbrc	r19, 1
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <conv_int+0xec>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <conv_int+0x10e>
    1a58:	ee 24       	eor	r14, r14
    1a5a:	ff 24       	eor	r15, r15
    1a5c:	87 01       	movw	r16, r14
    1a5e:	37 ff       	sbrs	r19, 7
    1a60:	08 c0       	rjmp	.+16     	; 0x1a72 <conv_int+0x100>
    1a62:	10 95       	com	r17
    1a64:	00 95       	com	r16
    1a66:	f0 94       	com	r15
    1a68:	e0 94       	com	r14
    1a6a:	e1 1c       	adc	r14, r1
    1a6c:	f1 1c       	adc	r15, r1
    1a6e:	01 1d       	adc	r16, r1
    1a70:	11 1d       	adc	r17, r1
    1a72:	c5 01       	movw	r24, r10
    1a74:	b8 01       	movw	r22, r16
    1a76:	a7 01       	movw	r20, r14
    1a78:	23 2f       	mov	r18, r19
    1a7a:	29 df       	rcall	.-430    	; 0x18ce <putval>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <conv_int+0x110>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	21 96       	adiw	r28, 0x01	; 1
    1a84:	ec e0       	ldi	r30, 0x0C	; 12
    1a86:	01 c4       	rjmp	.+2050   	; 0x228a <__epilogue_restores__+0xc>

00001a88 <conv_brk>:
    1a88:	a0 e2       	ldi	r26, 0x20	; 32
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e9 e4       	ldi	r30, 0x49	; 73
    1a8e:	fd e0       	ldi	r31, 0x0D	; 13
    1a90:	dc c3       	rjmp	.+1976   	; 0x224a <__prologue_saves__+0x4>
    1a92:	5c 01       	movw	r10, r24
    1a94:	6b 01       	movw	r12, r22
    1a96:	8a 01       	movw	r16, r20
    1a98:	79 01       	movw	r14, r18
    1a9a:	9e 01       	movw	r18, r28
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	80 e2       	ldi	r24, 0x20	; 32
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	11 92       	st	Z+, r1
    1aa6:	8a 95       	dec	r24
    1aa8:	e9 f7       	brne	.-6      	; 0x1aa4 <conv_brk+0x1c>
    1aaa:	f5 01       	movw	r30, r10
    1aac:	93 80       	ldd	r9, Z+3	; 0x03
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	88 24       	eor	r8, r8
    1ab6:	a0 e0       	ldi	r26, 0x00	; 0
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	f7 01       	movw	r30, r14
    1abe:	93 fc       	sbrc	r9, 3
    1ac0:	65 90       	lpm	r6, Z+
    1ac2:	93 fe       	sbrs	r9, 3
    1ac4:	61 90       	ld	r6, Z+
    1ac6:	7f 01       	movw	r14, r30
    1ac8:	66 20       	and	r6, r6
    1aca:	09 f4       	brne	.+2      	; 0x1ace <conv_brk+0x46>
    1acc:	7f c0       	rjmp	.+254    	; 0x1bcc <conv_brk+0x144>
    1ace:	f6 2d       	mov	r31, r6
    1ad0:	fe 35       	cpi	r31, 0x5E	; 94
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <conv_brk+0x50>
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	51 f1       	breq	.+84     	; 0x1b2c <conv_brk+0xa4>
    1ad8:	4a 2f       	mov	r20, r26
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	48 17       	cp	r20, r24
    1ade:	59 07       	cpc	r21, r25
    1ae0:	44 f4       	brge	.+16     	; 0x1af2 <conv_brk+0x6a>
    1ae2:	46 2d       	mov	r20, r6
    1ae4:	4d 35       	cpi	r20, 0x5D	; 93
    1ae6:	51 f1       	breq	.+84     	; 0x1b3c <conv_brk+0xb4>
    1ae8:	4d 32       	cpi	r20, 0x2D	; 45
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <conv_brk+0x6a>
    1aec:	88 20       	and	r8, r8
    1aee:	01 f1       	breq	.+64     	; 0x1b30 <conv_brk+0xa8>
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <conv_brk+0x70>
    1af2:	88 20       	and	r8, r8
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <conv_brk+0x70>
    1af6:	b6 2d       	mov	r27, r6
    1af8:	46 2d       	mov	r20, r6
    1afa:	46 95       	lsr	r20
    1afc:	46 95       	lsr	r20
    1afe:	46 95       	lsr	r20
    1b00:	f9 01       	movw	r30, r18
    1b02:	e4 0f       	add	r30, r20
    1b04:	f1 1d       	adc	r31, r1
    1b06:	46 2d       	mov	r20, r6
    1b08:	47 70       	andi	r20, 0x07	; 7
    1b0a:	2b 01       	movw	r4, r22
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <conv_brk+0x8a>
    1b0e:	44 0c       	add	r4, r4
    1b10:	55 1c       	adc	r5, r5
    1b12:	4a 95       	dec	r20
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <conv_brk+0x86>
    1b16:	80 80       	ld	r8, Z
    1b18:	84 28       	or	r8, r4
    1b1a:	80 82       	st	Z, r8
    1b1c:	6b 16       	cp	r6, r27
    1b1e:	59 f0       	breq	.+22     	; 0x1b36 <conv_brk+0xae>
    1b20:	6b 16       	cp	r6, r27
    1b22:	10 f4       	brcc	.+4      	; 0x1b28 <conv_brk+0xa0>
    1b24:	63 94       	inc	r6
    1b26:	e8 cf       	rjmp	.-48     	; 0x1af8 <conv_brk+0x70>
    1b28:	6a 94       	dec	r6
    1b2a:	e6 cf       	rjmp	.-52     	; 0x1af8 <conv_brk+0x70>
    1b2c:	a1 e0       	ldi	r26, 0x01	; 1
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <conv_brk+0xb0>
    1b30:	88 24       	eor	r8, r8
    1b32:	83 94       	inc	r8
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <conv_brk+0xb0>
    1b36:	88 24       	eor	r8, r8
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	c0 cf       	rjmp	.-128    	; 0x1abc <conv_brk+0x34>
    1b3c:	88 20       	and	r8, r8
    1b3e:	19 f0       	breq	.+6      	; 0x1b46 <conv_brk+0xbe>
    1b40:	8e 81       	ldd	r24, Y+6	; 0x06
    1b42:	80 62       	ori	r24, 0x20	; 32
    1b44:	8e 83       	std	Y+6, r24	; 0x06
    1b46:	aa 23       	and	r26, r26
    1b48:	51 f0       	breq	.+20     	; 0x1b5e <conv_brk+0xd6>
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	81 96       	adiw	r24, 0x21	; 33
    1b4e:	fe 01       	movw	r30, r28
    1b50:	31 96       	adiw	r30, 0x01	; 1
    1b52:	20 81       	ld	r18, Z
    1b54:	20 95       	com	r18
    1b56:	21 93       	st	Z+, r18
    1b58:	e8 17       	cp	r30, r24
    1b5a:	f9 07       	cpc	r31, r25
    1b5c:	d1 f7       	brne	.-12     	; 0x1b52 <conv_brk+0xca>
    1b5e:	99 24       	eor	r9, r9
    1b60:	93 94       	inc	r9
    1b62:	3e 01       	movw	r6, r28
    1b64:	08 94       	sec
    1b66:	61 1c       	adc	r6, r1
    1b68:	71 1c       	adc	r7, r1
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <conv_brk+0xe6>
    1b6c:	99 24       	eor	r9, r9
    1b6e:	c5 01       	movw	r24, r10
    1b70:	aa d4       	rcall	.+2388   	; 0x24c6 <fgetc>
    1b72:	97 fd       	sbrc	r25, 7
    1b74:	23 c0       	rjmp	.+70     	; 0x1bbc <conv_brk+0x134>
    1b76:	28 2f       	mov	r18, r24
    1b78:	26 95       	lsr	r18
    1b7a:	26 95       	lsr	r18
    1b7c:	26 95       	lsr	r18
    1b7e:	f3 01       	movw	r30, r6
    1b80:	e2 0f       	add	r30, r18
    1b82:	f1 1d       	adc	r31, r1
    1b84:	20 81       	ld	r18, Z
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	ac 01       	movw	r20, r24
    1b8a:	47 70       	andi	r20, 0x07	; 7
    1b8c:	50 70       	andi	r21, 0x00	; 0
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <conv_brk+0x10c>
    1b90:	35 95       	asr	r19
    1b92:	27 95       	ror	r18
    1b94:	4a 95       	dec	r20
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <conv_brk+0x108>
    1b98:	20 fd       	sbrc	r18, 0
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <conv_brk+0x11a>
    1b9c:	b5 01       	movw	r22, r10
    1b9e:	24 d5       	rcall	.+2632   	; 0x25e8 <ungetc>
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <conv_brk+0x134>
    1ba2:	01 15       	cp	r16, r1
    1ba4:	11 05       	cpc	r17, r1
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <conv_brk+0x126>
    1ba8:	f8 01       	movw	r30, r16
    1baa:	81 93       	st	Z+, r24
    1bac:	8f 01       	movw	r16, r30
    1bae:	08 94       	sec
    1bb0:	c1 08       	sbc	r12, r1
    1bb2:	d1 08       	sbc	r13, r1
    1bb4:	c1 14       	cp	r12, r1
    1bb6:	d1 04       	cpc	r13, r1
    1bb8:	c9 f6       	brne	.-78     	; 0x1b6c <conv_brk+0xe4>
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <conv_brk+0x138>
    1bbc:	99 20       	and	r9, r9
    1bbe:	31 f4       	brne	.+12     	; 0x1bcc <conv_brk+0x144>
    1bc0:	01 15       	cp	r16, r1
    1bc2:	11 05       	cpc	r17, r1
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <conv_brk+0x148>
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	10 82       	st	Z, r1
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <conv_brk+0x148>
    1bcc:	ee 24       	eor	r14, r14
    1bce:	ff 24       	eor	r15, r15
    1bd0:	c7 01       	movw	r24, r14
    1bd2:	a0 96       	adiw	r28, 0x20	; 32
    1bd4:	e0 e1       	ldi	r30, 0x10	; 16
    1bd6:	55 c3       	rjmp	.+1706   	; 0x2282 <__epilogue_restores__+0x4>

00001bd8 <conv_flt>:
    1bd8:	2f 92       	push	r2
    1bda:	3f 92       	push	r3
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	5c 01       	movw	r10, r24
    1bfc:	eb 01       	movw	r28, r22
    1bfe:	1a 01       	movw	r2, r20
    1c00:	62 d4       	rcall	.+2244   	; 0x24c6 <fgetc>
    1c02:	8c 01       	movw	r16, r24
    1c04:	8b 32       	cpi	r24, 0x2B	; 43
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <conv_flt+0x36>
    1c08:	8d 32       	cpi	r24, 0x2D	; 45
    1c0a:	71 f4       	brne	.+28     	; 0x1c28 <conv_flt+0x50>
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <conv_flt+0x3a>
    1c0e:	ff 24       	eor	r15, r15
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <conv_flt+0x3e>
    1c12:	f0 e8       	ldi	r31, 0x80	; 128
    1c14:	ff 2e       	mov	r15, r31
    1c16:	21 97       	sbiw	r28, 0x01	; 1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <conv_flt+0x44>
    1c1a:	f0 c0       	rjmp	.+480    	; 0x1dfc <conv_flt+0x224>
    1c1c:	c5 01       	movw	r24, r10
    1c1e:	53 d4       	rcall	.+2214   	; 0x24c6 <fgetc>
    1c20:	8c 01       	movw	r16, r24
    1c22:	97 ff       	sbrs	r25, 7
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <conv_flt+0x52>
    1c26:	ea c0       	rjmp	.+468    	; 0x1dfc <conv_flt+0x224>
    1c28:	ff 24       	eor	r15, r15
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	23 d4       	rcall	.+2118   	; 0x2474 <tolower>
    1c2e:	89 36       	cpi	r24, 0x69	; 105
    1c30:	91 05       	cpc	r25, r1
    1c32:	d1 f0       	breq	.+52     	; 0x1c68 <conv_flt+0x90>
    1c34:	8e 36       	cpi	r24, 0x6E	; 110
    1c36:	91 05       	cpc	r25, r1
    1c38:	69 f5       	brne	.+90     	; 0x1c94 <conv_flt+0xbc>
    1c3a:	13 c0       	rjmp	.+38     	; 0x1c62 <conv_flt+0x8a>
    1c3c:	21 97       	sbiw	r28, 0x01	; 1
    1c3e:	59 f0       	breq	.+22     	; 0x1c56 <conv_flt+0x7e>
    1c40:	c5 01       	movw	r24, r10
    1c42:	41 d4       	rcall	.+2178   	; 0x24c6 <fgetc>
    1c44:	6c 01       	movw	r12, r24
    1c46:	97 fd       	sbrc	r25, 7
    1c48:	06 c0       	rjmp	.+12     	; 0x1c56 <conv_flt+0x7e>
    1c4a:	14 d4       	rcall	.+2088   	; 0x2474 <tolower>
    1c4c:	88 16       	cp	r8, r24
    1c4e:	71 f0       	breq	.+28     	; 0x1c6c <conv_flt+0x94>
    1c50:	c6 01       	movw	r24, r12
    1c52:	b5 01       	movw	r22, r10
    1c54:	c9 d4       	rcall	.+2450   	; 0x25e8 <ungetc>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	08 35       	cpi	r16, 0x58	; 88
    1c5a:	18 07       	cpc	r17, r24
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <conv_flt+0x88>
    1c5e:	ce c0       	rjmp	.+412    	; 0x1dfc <conv_flt+0x224>
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <conv_flt+0xa8>
    1c62:	02 e5       	ldi	r16, 0x52	; 82
    1c64:	11 e0       	ldi	r17, 0x01	; 1
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <conv_flt+0x94>
    1c68:	05 e5       	ldi	r16, 0x55	; 85
    1c6a:	11 e0       	ldi	r17, 0x01	; 1
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	0f 5f       	subi	r16, 0xFF	; 255
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	84 90       	lpm	r8, Z+
    1c74:	88 20       	and	r8, r8
    1c76:	11 f7       	brne	.-60     	; 0x1c3c <conv_flt+0x64>
    1c78:	e1 e0       	ldi	r30, 0x01	; 1
    1c7a:	05 35       	cpi	r16, 0x55	; 85
    1c7c:	1e 07       	cpc	r17, r30
    1c7e:	29 f0       	breq	.+10     	; 0x1c8a <conv_flt+0xb2>
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	80 e8       	ldi	r24, 0x80	; 128
    1c86:	9f e7       	ldi	r25, 0x7F	; 127
    1c88:	ae c0       	rjmp	.+348    	; 0x1de6 <conv_flt+0x20e>
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	80 ec       	ldi	r24, 0xC0	; 192
    1c90:	9f e7       	ldi	r25, 0x7F	; 127
    1c92:	a9 c0       	rjmp	.+338    	; 0x1de6 <conv_flt+0x20e>
    1c94:	44 24       	eor	r4, r4
    1c96:	55 24       	eor	r5, r5
    1c98:	32 01       	movw	r6, r4
    1c9a:	cc 24       	eor	r12, r12
    1c9c:	dd 24       	eor	r13, r13
    1c9e:	20 2f       	mov	r18, r16
    1ca0:	20 53       	subi	r18, 0x30	; 48
    1ca2:	2a 30       	cpi	r18, 0x0A	; 10
    1ca4:	30 f5       	brcc	.+76     	; 0x1cf2 <conv_flt+0x11a>
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	ff 2a       	or	r15, r31
    1caa:	4f 2d       	mov	r20, r15
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	ca 01       	movw	r24, r20
    1cb0:	88 70       	andi	r24, 0x08	; 8
    1cb2:	90 70       	andi	r25, 0x00	; 0
    1cb4:	f2 fe       	sbrs	r15, 2
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <conv_flt+0xec>
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	09 f5       	brne	.+66     	; 0x1cfe <conv_flt+0x126>
    1cbc:	08 94       	sec
    1cbe:	c1 1c       	adc	r12, r1
    1cc0:	d1 1c       	adc	r13, r1
    1cc2:	1d c0       	rjmp	.+58     	; 0x1cfe <conv_flt+0x126>
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	19 f0       	breq	.+6      	; 0x1cce <conv_flt+0xf6>
    1cc8:	08 94       	sec
    1cca:	c1 08       	sbc	r12, r1
    1ccc:	d1 08       	sbc	r13, r1
    1cce:	c3 01       	movw	r24, r6
    1cd0:	b2 01       	movw	r22, r4
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	08 de       	rcall	.-1008   	; 0x18e6 <mulacc>
    1cd6:	2b 01       	movw	r4, r22
    1cd8:	3c 01       	movw	r6, r24
    1cda:	88 e9       	ldi	r24, 0x98	; 152
    1cdc:	48 16       	cp	r4, r24
    1cde:	89 e9       	ldi	r24, 0x99	; 153
    1ce0:	58 06       	cpc	r5, r24
    1ce2:	89 e9       	ldi	r24, 0x99	; 153
    1ce4:	68 06       	cpc	r6, r24
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	78 06       	cpc	r7, r24
    1cea:	48 f0       	brcs	.+18     	; 0x1cfe <conv_flt+0x126>
    1cec:	e4 e0       	ldi	r30, 0x04	; 4
    1cee:	fe 2a       	or	r15, r30
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <conv_flt+0x126>
    1cf2:	2e 3f       	cpi	r18, 0xFE	; 254
    1cf4:	59 f4       	brne	.+22     	; 0x1d0c <conv_flt+0x134>
    1cf6:	f3 fc       	sbrc	r15, 3
    1cf8:	09 c0       	rjmp	.+18     	; 0x1d0c <conv_flt+0x134>
    1cfa:	f8 e0       	ldi	r31, 0x08	; 8
    1cfc:	ff 2a       	or	r15, r31
    1cfe:	21 97       	sbiw	r28, 0x01	; 1
    1d00:	29 f0       	breq	.+10     	; 0x1d0c <conv_flt+0x134>
    1d02:	c5 01       	movw	r24, r10
    1d04:	e0 d3       	rcall	.+1984   	; 0x24c6 <fgetc>
    1d06:	8c 01       	movw	r16, r24
    1d08:	97 ff       	sbrs	r25, 7
    1d0a:	c9 cf       	rjmp	.-110    	; 0x1c9e <conv_flt+0xc6>
    1d0c:	f1 fe       	sbrs	r15, 1
    1d0e:	76 c0       	rjmp	.+236    	; 0x1dfc <conv_flt+0x224>
    1d10:	05 36       	cpi	r16, 0x65	; 101
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <conv_flt+0x140>
    1d14:	05 34       	cpi	r16, 0x45	; 69
    1d16:	b9 f5       	brne	.+110    	; 0x1d86 <conv_flt+0x1ae>
    1d18:	21 97       	sbiw	r28, 0x01	; 1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <conv_flt+0x146>
    1d1c:	6f c0       	rjmp	.+222    	; 0x1dfc <conv_flt+0x224>
    1d1e:	c5 01       	movw	r24, r10
    1d20:	d2 d3       	rcall	.+1956   	; 0x24c6 <fgetc>
    1d22:	8c 01       	movw	r16, r24
    1d24:	97 fd       	sbrc	r25, 7
    1d26:	6a c0       	rjmp	.+212    	; 0x1dfc <conv_flt+0x224>
    1d28:	8b 32       	cpi	r24, 0x2B	; 43
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <conv_flt+0x15c>
    1d2c:	8d 32       	cpi	r24, 0x2D	; 45
    1d2e:	41 f4       	brne	.+16     	; 0x1d40 <conv_flt+0x168>
    1d30:	80 e1       	ldi	r24, 0x10	; 16
    1d32:	f8 2a       	or	r15, r24
    1d34:	21 97       	sbiw	r28, 0x01	; 1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <conv_flt+0x162>
    1d38:	61 c0       	rjmp	.+194    	; 0x1dfc <conv_flt+0x224>
    1d3a:	c5 01       	movw	r24, r10
    1d3c:	c4 d3       	rcall	.+1928   	; 0x24c6 <fgetc>
    1d3e:	8c 01       	movw	r16, r24
    1d40:	c8 01       	movw	r24, r16
    1d42:	c0 97       	sbiw	r24, 0x30	; 48
    1d44:	8a 30       	cpi	r24, 0x0A	; 10
    1d46:	91 05       	cpc	r25, r1
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <conv_flt+0x174>
    1d4a:	58 c0       	rjmp	.+176    	; 0x1dfc <conv_flt+0x224>
    1d4c:	88 24       	eor	r8, r8
    1d4e:	99 24       	eor	r9, r9
    1d50:	b4 01       	movw	r22, r8
    1d52:	88 27       	eor	r24, r24
    1d54:	77 fd       	sbrc	r23, 7
    1d56:	80 95       	com	r24
    1d58:	98 2f       	mov	r25, r24
    1d5a:	20 2f       	mov	r18, r16
    1d5c:	20 53       	subi	r18, 0x30	; 48
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	c2 dd       	rcall	.-1148   	; 0x18e6 <mulacc>
    1d62:	4b 01       	movw	r8, r22
    1d64:	21 97       	sbiw	r28, 0x01	; 1
    1d66:	39 f0       	breq	.+14     	; 0x1d76 <conv_flt+0x19e>
    1d68:	c5 01       	movw	r24, r10
    1d6a:	ad d3       	rcall	.+1882   	; 0x24c6 <fgetc>
    1d6c:	8c 01       	movw	r16, r24
    1d6e:	c0 97       	sbiw	r24, 0x30	; 48
    1d70:	8a 30       	cpi	r24, 0x0A	; 10
    1d72:	91 05       	cpc	r25, r1
    1d74:	68 f3       	brcs	.-38     	; 0x1d50 <conv_flt+0x178>
    1d76:	f4 fe       	sbrs	r15, 4
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <conv_flt+0x1aa>
    1d7a:	90 94       	com	r9
    1d7c:	81 94       	neg	r8
    1d7e:	91 08       	sbc	r9, r1
    1d80:	93 94       	inc	r9
    1d82:	c8 0c       	add	r12, r8
    1d84:	d9 1c       	adc	r13, r9
    1d86:	20 97       	sbiw	r28, 0x00	; 0
    1d88:	29 f0       	breq	.+10     	; 0x1d94 <conv_flt+0x1bc>
    1d8a:	17 fd       	sbrc	r17, 7
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <conv_flt+0x1bc>
    1d8e:	c8 01       	movw	r24, r16
    1d90:	b5 01       	movw	r22, r10
    1d92:	2a d4       	rcall	.+2132   	; 0x25e8 <ungetc>
    1d94:	c3 01       	movw	r24, r6
    1d96:	b2 01       	movw	r22, r4
    1d98:	65 d1       	rcall	.+714    	; 0x2064 <__floatunsisf>
    1d9a:	d7 fe       	sbrs	r13, 7
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <conv_flt+0x1d4>
    1d9e:	c1 e7       	ldi	r28, 0x71	; 113
    1da0:	d1 e0       	ldi	r29, 0x01	; 1
    1da2:	d0 94       	com	r13
    1da4:	c1 94       	neg	r12
    1da6:	d1 08       	sbc	r13, r1
    1da8:	d3 94       	inc	r13
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <conv_flt+0x1d8>
    1dac:	c9 e8       	ldi	r28, 0x89	; 137
    1dae:	d1 e0       	ldi	r29, 0x01	; 1
    1db0:	e6 e0       	ldi	r30, 0x06	; 6
    1db2:	ae 2e       	mov	r10, r30
    1db4:	b1 2c       	mov	r11, r1
    1db6:	00 e2       	ldi	r16, 0x20	; 32
    1db8:	10 e0       	ldi	r17, 0x00	; 0
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <conv_flt+0x1f4>
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	25 91       	lpm	r18, Z+
    1dc0:	35 91       	lpm	r19, Z+
    1dc2:	45 91       	lpm	r20, Z+
    1dc4:	54 91       	lpm	r21, Z+
    1dc6:	8b d1       	rcall	.+790    	; 0x20de <__mulsf3>
    1dc8:	c0 1a       	sub	r12, r16
    1dca:	d1 0a       	sbc	r13, r17
    1dcc:	c0 16       	cp	r12, r16
    1dce:	d1 06       	cpc	r13, r17
    1dd0:	a8 f7       	brcc	.-22     	; 0x1dbc <conv_flt+0x1e4>
    1dd2:	16 95       	lsr	r17
    1dd4:	07 95       	ror	r16
    1dd6:	08 94       	sec
    1dd8:	a1 08       	sbc	r10, r1
    1dda:	b1 08       	sbc	r11, r1
    1ddc:	a1 14       	cp	r10, r1
    1dde:	b1 04       	cpc	r11, r1
    1de0:	11 f0       	breq	.+4      	; 0x1de6 <conv_flt+0x20e>
    1de2:	24 97       	sbiw	r28, 0x04	; 4
    1de4:	f3 cf       	rjmp	.-26     	; 0x1dcc <conv_flt+0x1f4>
    1de6:	f7 fc       	sbrc	r15, 7
    1de8:	90 58       	subi	r25, 0x80	; 128
    1dea:	21 14       	cp	r2, r1
    1dec:	31 04       	cpc	r3, r1
    1dee:	41 f0       	breq	.+16     	; 0x1e00 <conv_flt+0x228>
    1df0:	f1 01       	movw	r30, r2
    1df2:	60 83       	st	Z, r22
    1df4:	71 83       	std	Z+1, r23	; 0x01
    1df6:	82 83       	std	Z+2, r24	; 0x02
    1df8:	93 83       	std	Z+3, r25	; 0x03
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <conv_flt+0x228>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <conv_flt+0x22a>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	bf 90       	pop	r11
    1e12:	af 90       	pop	r10
    1e14:	9f 90       	pop	r9
    1e16:	8f 90       	pop	r8
    1e18:	7f 90       	pop	r7
    1e1a:	6f 90       	pop	r6
    1e1c:	5f 90       	pop	r5
    1e1e:	4f 90       	pop	r4
    1e20:	3f 90       	pop	r3
    1e22:	2f 90       	pop	r2
    1e24:	08 95       	ret

00001e26 <vfscanf>:
    1e26:	a1 e0       	ldi	r26, 0x01	; 1
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e8 e1       	ldi	r30, 0x18	; 24
    1e2c:	ff e0       	ldi	r31, 0x0F	; 15
    1e2e:	0d c2       	rjmp	.+1050   	; 0x224a <__prologue_saves__+0x4>
    1e30:	6c 01       	movw	r12, r24
    1e32:	5b 01       	movw	r10, r22
    1e34:	3a 01       	movw	r6, r20
    1e36:	fc 01       	movw	r30, r24
    1e38:	17 82       	std	Z+7, r1	; 0x07
    1e3a:	16 82       	std	Z+6, r1	; 0x06
    1e3c:	ee 24       	eor	r14, r14
    1e3e:	fb c0       	rjmp	.+502    	; 0x2036 <vfscanf+0x210>
    1e40:	81 2f       	mov	r24, r17
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0f d3       	rcall	.+1566   	; 0x2464 <isspace>
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	19 f0       	breq	.+6      	; 0x1e50 <vfscanf+0x2a>
    1e4a:	c6 01       	movw	r24, r12
    1e4c:	7a dd       	rcall	.-1292   	; 0x1942 <skip_spaces>
    1e4e:	f3 c0       	rjmp	.+486    	; 0x2036 <vfscanf+0x210>
    1e50:	15 32       	cpi	r17, 0x25	; 37
    1e52:	41 f4       	brne	.+16     	; 0x1e64 <vfscanf+0x3e>
    1e54:	f5 01       	movw	r30, r10
    1e56:	03 fd       	sbrc	r16, 3
    1e58:	35 91       	lpm	r19, Z+
    1e5a:	03 ff       	sbrs	r16, 3
    1e5c:	31 91       	ld	r19, Z+
    1e5e:	5f 01       	movw	r10, r30
    1e60:	35 32       	cpi	r19, 0x25	; 37
    1e62:	51 f4       	brne	.+20     	; 0x1e78 <vfscanf+0x52>
    1e64:	c6 01       	movw	r24, r12
    1e66:	2f d3       	rcall	.+1630   	; 0x24c6 <fgetc>
    1e68:	97 fd       	sbrc	r25, 7
    1e6a:	f1 c0       	rjmp	.+482    	; 0x204e <vfscanf+0x228>
    1e6c:	18 17       	cp	r17, r24
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <vfscanf+0x4c>
    1e70:	e2 c0       	rjmp	.+452    	; 0x2036 <vfscanf+0x210>
    1e72:	b6 01       	movw	r22, r12
    1e74:	b9 d3       	rcall	.+1906   	; 0x25e8 <ungetc>
    1e76:	ed c0       	rjmp	.+474    	; 0x2052 <vfscanf+0x22c>
    1e78:	3a 32       	cpi	r19, 0x2A	; 42
    1e7a:	41 f4       	brne	.+16     	; 0x1e8c <vfscanf+0x66>
    1e7c:	03 fd       	sbrc	r16, 3
    1e7e:	35 91       	lpm	r19, Z+
    1e80:	03 ff       	sbrs	r16, 3
    1e82:	31 91       	ld	r19, Z+
    1e84:	5f 01       	movw	r10, r30
    1e86:	ff 24       	eor	r15, r15
    1e88:	f3 94       	inc	r15
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <vfscanf+0x68>
    1e8c:	ff 24       	eor	r15, r15
    1e8e:	44 24       	eor	r4, r4
    1e90:	55 24       	eor	r5, r5
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <vfscanf+0x8a>
    1e94:	f2 e0       	ldi	r31, 0x02	; 2
    1e96:	ff 2a       	or	r15, r31
    1e98:	b2 01       	movw	r22, r4
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	22 dd       	rcall	.-1468   	; 0x18e6 <mulacc>
    1ea2:	2b 01       	movw	r4, r22
    1ea4:	f5 01       	movw	r30, r10
    1ea6:	03 fd       	sbrc	r16, 3
    1ea8:	35 91       	lpm	r19, Z+
    1eaa:	03 ff       	sbrs	r16, 3
    1eac:	31 91       	ld	r19, Z+
    1eae:	5f 01       	movw	r10, r30
    1eb0:	23 2f       	mov	r18, r19
    1eb2:	20 53       	subi	r18, 0x30	; 48
    1eb4:	2a 30       	cpi	r18, 0x0A	; 10
    1eb6:	70 f3       	brcs	.-36     	; 0x1e94 <vfscanf+0x6e>
    1eb8:	f1 fe       	sbrs	r15, 1
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <vfscanf+0x9e>
    1ebc:	41 14       	cp	r4, r1
    1ebe:	51 04       	cpc	r5, r1
    1ec0:	21 f4       	brne	.+8      	; 0x1eca <vfscanf+0xa4>
    1ec2:	c7 c0       	rjmp	.+398    	; 0x2052 <vfscanf+0x22c>
    1ec4:	44 24       	eor	r4, r4
    1ec6:	4a 94       	dec	r4
    1ec8:	54 2c       	mov	r5, r4
    1eca:	38 36       	cpi	r19, 0x68	; 104
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <vfscanf+0xae>
    1ece:	3c 36       	cpi	r19, 0x6C	; 108
    1ed0:	99 f4       	brne	.+38     	; 0x1ef8 <vfscanf+0xd2>
    1ed2:	0a c0       	rjmp	.+20     	; 0x1ee8 <vfscanf+0xc2>
    1ed4:	f5 01       	movw	r30, r10
    1ed6:	03 fd       	sbrc	r16, 3
    1ed8:	35 91       	lpm	r19, Z+
    1eda:	03 ff       	sbrs	r16, 3
    1edc:	31 91       	ld	r19, Z+
    1ede:	5f 01       	movw	r10, r30
    1ee0:	38 36       	cpi	r19, 0x68	; 104
    1ee2:	51 f4       	brne	.+20     	; 0x1ef8 <vfscanf+0xd2>
    1ee4:	f8 e0       	ldi	r31, 0x08	; 8
    1ee6:	ff 2a       	or	r15, r31
    1ee8:	44 e0       	ldi	r20, 0x04	; 4
    1eea:	f4 2a       	or	r15, r20
    1eec:	f5 01       	movw	r30, r10
    1eee:	03 fd       	sbrc	r16, 3
    1ef0:	35 91       	lpm	r19, Z+
    1ef2:	03 ff       	sbrs	r16, 3
    1ef4:	31 91       	ld	r19, Z+
    1ef6:	5f 01       	movw	r10, r30
    1ef8:	33 23       	and	r19, r19
    1efa:	09 f4       	brne	.+2      	; 0x1efe <vfscanf+0xd8>
    1efc:	aa c0       	rjmp	.+340    	; 0x2052 <vfscanf+0x22c>
    1efe:	80 e4       	ldi	r24, 0x40	; 64
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	63 2f       	mov	r22, r19
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	39 83       	std	Y+1, r19	; 0x01
    1f08:	bd d2       	rcall	.+1402   	; 0x2484 <strchr_P>
    1f0a:	39 81       	ldd	r19, Y+1	; 0x01
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <vfscanf+0xec>
    1f10:	a0 c0       	rjmp	.+320    	; 0x2052 <vfscanf+0x22c>
    1f12:	8f 2d       	mov	r24, r15
    1f14:	f0 fc       	sbrc	r15, 0
    1f16:	08 c0       	rjmp	.+16     	; 0x1f28 <vfscanf+0x102>
    1f18:	f3 01       	movw	r30, r6
    1f1a:	00 81       	ld	r16, Z
    1f1c:	11 81       	ldd	r17, Z+1	; 0x01
    1f1e:	42 e0       	ldi	r20, 0x02	; 2
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	64 0e       	add	r6, r20
    1f24:	75 1e       	adc	r7, r21
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfscanf+0x106>
    1f28:	00 e0       	ldi	r16, 0x00	; 0
    1f2a:	10 e0       	ldi	r17, 0x00	; 0
    1f2c:	3e 36       	cpi	r19, 0x6E	; 110
    1f2e:	49 f4       	brne	.+18     	; 0x1f42 <vfscanf+0x11c>
    1f30:	f6 01       	movw	r30, r12
    1f32:	46 81       	ldd	r20, Z+6	; 0x06
    1f34:	57 81       	ldd	r21, Z+7	; 0x07
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	2f 2d       	mov	r18, r15
    1f3e:	c7 dc       	rcall	.-1650   	; 0x18ce <putval>
    1f40:	7a c0       	rjmp	.+244    	; 0x2036 <vfscanf+0x210>
    1f42:	33 36       	cpi	r19, 0x63	; 99
    1f44:	b1 f4       	brne	.+44     	; 0x1f72 <vfscanf+0x14c>
    1f46:	81 fd       	sbrc	r24, 1
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <vfscanf+0x12a>
    1f4a:	a1 e0       	ldi	r26, 0x01	; 1
    1f4c:	4a 2e       	mov	r4, r26
    1f4e:	51 2c       	mov	r5, r1
    1f50:	c6 01       	movw	r24, r12
    1f52:	b9 d2       	rcall	.+1394   	; 0x24c6 <fgetc>
    1f54:	97 fd       	sbrc	r25, 7
    1f56:	7b c0       	rjmp	.+246    	; 0x204e <vfscanf+0x228>
    1f58:	01 15       	cp	r16, r1
    1f5a:	11 05       	cpc	r17, r1
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <vfscanf+0x13e>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	81 93       	st	Z+, r24
    1f62:	8f 01       	movw	r16, r30
    1f64:	08 94       	sec
    1f66:	41 08       	sbc	r4, r1
    1f68:	51 08       	sbc	r5, r1
    1f6a:	41 14       	cp	r4, r1
    1f6c:	51 04       	cpc	r5, r1
    1f6e:	81 f7       	brne	.-32     	; 0x1f50 <vfscanf+0x12a>
    1f70:	60 c0       	rjmp	.+192    	; 0x2032 <vfscanf+0x20c>
    1f72:	3b 35       	cpi	r19, 0x5B	; 91
    1f74:	51 f4       	brne	.+20     	; 0x1f8a <vfscanf+0x164>
    1f76:	c6 01       	movw	r24, r12
    1f78:	b2 01       	movw	r22, r4
    1f7a:	a8 01       	movw	r20, r16
    1f7c:	95 01       	movw	r18, r10
    1f7e:	84 dd       	rcall	.-1272   	; 0x1a88 <conv_brk>
    1f80:	5c 01       	movw	r10, r24
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <vfscanf+0x162>
    1f86:	55 c0       	rjmp	.+170    	; 0x2032 <vfscanf+0x20c>
    1f88:	4f c0       	rjmp	.+158    	; 0x2028 <vfscanf+0x202>
    1f8a:	c6 01       	movw	r24, r12
    1f8c:	39 83       	std	Y+1, r19	; 0x01
    1f8e:	d9 dc       	rcall	.-1614   	; 0x1942 <skip_spaces>
    1f90:	39 81       	ldd	r19, Y+1	; 0x01
    1f92:	97 fd       	sbrc	r25, 7
    1f94:	5c c0       	rjmp	.+184    	; 0x204e <vfscanf+0x228>
    1f96:	3f 36       	cpi	r19, 0x6F	; 111
    1f98:	c9 f1       	breq	.+114    	; 0x200c <vfscanf+0x1e6>
    1f9a:	30 37       	cpi	r19, 0x70	; 112
    1f9c:	38 f4       	brcc	.+14     	; 0x1fac <vfscanf+0x186>
    1f9e:	34 36       	cpi	r19, 0x64	; 100
    1fa0:	91 f1       	breq	.+100    	; 0x2006 <vfscanf+0x1e0>
    1fa2:	39 36       	cpi	r19, 0x69	; 105
    1fa4:	a9 f1       	breq	.+106    	; 0x2010 <vfscanf+0x1ea>
    1fa6:	38 35       	cpi	r19, 0x58	; 88
    1fa8:	c9 f5       	brne	.+114    	; 0x201c <vfscanf+0x1f6>
    1faa:	2a c0       	rjmp	.+84     	; 0x2000 <vfscanf+0x1da>
    1fac:	33 37       	cpi	r19, 0x73	; 115
    1fae:	51 f0       	breq	.+20     	; 0x1fc4 <vfscanf+0x19e>
    1fb0:	34 37       	cpi	r19, 0x74	; 116
    1fb2:	18 f4       	brcc	.+6      	; 0x1fba <vfscanf+0x194>
    1fb4:	30 37       	cpi	r19, 0x70	; 112
    1fb6:	91 f5       	brne	.+100    	; 0x201c <vfscanf+0x1f6>
    1fb8:	23 c0       	rjmp	.+70     	; 0x2000 <vfscanf+0x1da>
    1fba:	35 37       	cpi	r19, 0x75	; 117
    1fbc:	21 f1       	breq	.+72     	; 0x2006 <vfscanf+0x1e0>
    1fbe:	38 37       	cpi	r19, 0x78	; 120
    1fc0:	69 f5       	brne	.+90     	; 0x201c <vfscanf+0x1f6>
    1fc2:	1e c0       	rjmp	.+60     	; 0x2000 <vfscanf+0x1da>
    1fc4:	c6 01       	movw	r24, r12
    1fc6:	7f d2       	rcall	.+1278   	; 0x24c6 <fgetc>
    1fc8:	4c 01       	movw	r8, r24
    1fca:	97 fd       	sbrc	r25, 7
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <vfscanf+0x1ce>
    1fce:	4a d2       	rcall	.+1172   	; 0x2464 <isspace>
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	21 f0       	breq	.+8      	; 0x1fdc <vfscanf+0x1b6>
    1fd4:	c4 01       	movw	r24, r8
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	07 d3       	rcall	.+1550   	; 0x25e8 <ungetc>
    1fda:	0c c0       	rjmp	.+24     	; 0x1ff4 <vfscanf+0x1ce>
    1fdc:	01 15       	cp	r16, r1
    1fde:	11 05       	cpc	r17, r1
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <vfscanf+0x1c2>
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	81 92       	st	Z+, r8
    1fe6:	8f 01       	movw	r16, r30
    1fe8:	08 94       	sec
    1fea:	41 08       	sbc	r4, r1
    1fec:	51 08       	sbc	r5, r1
    1fee:	41 14       	cp	r4, r1
    1ff0:	51 04       	cpc	r5, r1
    1ff2:	41 f7       	brne	.-48     	; 0x1fc4 <vfscanf+0x19e>
    1ff4:	01 15       	cp	r16, r1
    1ff6:	11 05       	cpc	r17, r1
    1ff8:	e1 f0       	breq	.+56     	; 0x2032 <vfscanf+0x20c>
    1ffa:	f8 01       	movw	r30, r16
    1ffc:	10 82       	st	Z, r1
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <vfscanf+0x20c>
    2000:	f0 e4       	ldi	r31, 0x40	; 64
    2002:	ff 2a       	or	r15, r31
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <vfscanf+0x1ea>
    2006:	40 e2       	ldi	r20, 0x20	; 32
    2008:	f4 2a       	or	r15, r20
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <vfscanf+0x1ea>
    200c:	50 e1       	ldi	r21, 0x10	; 16
    200e:	f5 2a       	or	r15, r21
    2010:	c6 01       	movw	r24, r12
    2012:	b2 01       	movw	r22, r4
    2014:	a8 01       	movw	r20, r16
    2016:	2f 2d       	mov	r18, r15
    2018:	ac dc       	rcall	.-1704   	; 0x1972 <conv_int>
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <vfscanf+0x1fe>
    201c:	c6 01       	movw	r24, r12
    201e:	b2 01       	movw	r22, r4
    2020:	a8 01       	movw	r20, r16
    2022:	da dd       	rcall	.-1100   	; 0x1bd8 <conv_flt>
    2024:	88 23       	and	r24, r24
    2026:	29 f4       	brne	.+10     	; 0x2032 <vfscanf+0x20c>
    2028:	f6 01       	movw	r30, r12
    202a:	83 81       	ldd	r24, Z+3	; 0x03
    202c:	80 73       	andi	r24, 0x30	; 48
    202e:	79 f4       	brne	.+30     	; 0x204e <vfscanf+0x228>
    2030:	10 c0       	rjmp	.+32     	; 0x2052 <vfscanf+0x22c>
    2032:	f0 fe       	sbrs	r15, 0
    2034:	e3 94       	inc	r14
    2036:	f6 01       	movw	r30, r12
    2038:	03 81       	ldd	r16, Z+3	; 0x03
    203a:	f5 01       	movw	r30, r10
    203c:	03 fd       	sbrc	r16, 3
    203e:	15 91       	lpm	r17, Z+
    2040:	03 ff       	sbrs	r16, 3
    2042:	11 91       	ld	r17, Z+
    2044:	5f 01       	movw	r10, r30
    2046:	11 23       	and	r17, r17
    2048:	09 f0       	breq	.+2      	; 0x204c <vfscanf+0x226>
    204a:	fa ce       	rjmp	.-524    	; 0x1e40 <vfscanf+0x1a>
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <vfscanf+0x22c>
    204e:	ee 20       	and	r14, r14
    2050:	19 f0       	breq	.+6      	; 0x2058 <vfscanf+0x232>
    2052:	2e 2d       	mov	r18, r14
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <vfscanf+0x236>
    2058:	2f ef       	ldi	r18, 0xFF	; 255
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	c9 01       	movw	r24, r18
    205e:	21 96       	adiw	r28, 0x01	; 1
    2060:	e0 e1       	ldi	r30, 0x10	; 16
    2062:	0f c1       	rjmp	.+542    	; 0x2282 <__epilogue_restores__+0x4>

00002064 <__floatunsisf>:
    2064:	e8 94       	clt
    2066:	09 c0       	rjmp	.+18     	; 0x207a <__floatsisf+0x12>

00002068 <__floatsisf>:
    2068:	97 fb       	bst	r25, 7
    206a:	3e f4       	brtc	.+14     	; 0x207a <__floatsisf+0x12>
    206c:	90 95       	com	r25
    206e:	80 95       	com	r24
    2070:	70 95       	com	r23
    2072:	61 95       	neg	r22
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	8f 4f       	sbci	r24, 0xFF	; 255
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	99 23       	and	r25, r25
    207c:	a9 f0       	breq	.+42     	; 0x20a8 <__floatsisf+0x40>
    207e:	f9 2f       	mov	r31, r25
    2080:	96 e9       	ldi	r25, 0x96	; 150
    2082:	bb 27       	eor	r27, r27
    2084:	93 95       	inc	r25
    2086:	f6 95       	lsr	r31
    2088:	87 95       	ror	r24
    208a:	77 95       	ror	r23
    208c:	67 95       	ror	r22
    208e:	b7 95       	ror	r27
    2090:	f1 11       	cpse	r31, r1
    2092:	f8 cf       	rjmp	.-16     	; 0x2084 <__floatsisf+0x1c>
    2094:	fa f4       	brpl	.+62     	; 0x20d4 <__floatsisf+0x6c>
    2096:	bb 0f       	add	r27, r27
    2098:	11 f4       	brne	.+4      	; 0x209e <__floatsisf+0x36>
    209a:	60 ff       	sbrs	r22, 0
    209c:	1b c0       	rjmp	.+54     	; 0x20d4 <__floatsisf+0x6c>
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	8f 4f       	sbci	r24, 0xFF	; 255
    20a4:	9f 4f       	sbci	r25, 0xFF	; 255
    20a6:	16 c0       	rjmp	.+44     	; 0x20d4 <__floatsisf+0x6c>
    20a8:	88 23       	and	r24, r24
    20aa:	11 f0       	breq	.+4      	; 0x20b0 <__floatsisf+0x48>
    20ac:	96 e9       	ldi	r25, 0x96	; 150
    20ae:	11 c0       	rjmp	.+34     	; 0x20d2 <__floatsisf+0x6a>
    20b0:	77 23       	and	r23, r23
    20b2:	21 f0       	breq	.+8      	; 0x20bc <__floatsisf+0x54>
    20b4:	9e e8       	ldi	r25, 0x8E	; 142
    20b6:	87 2f       	mov	r24, r23
    20b8:	76 2f       	mov	r23, r22
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <__floatsisf+0x5e>
    20bc:	66 23       	and	r22, r22
    20be:	71 f0       	breq	.+28     	; 0x20dc <__floatsisf+0x74>
    20c0:	96 e8       	ldi	r25, 0x86	; 134
    20c2:	86 2f       	mov	r24, r22
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	2a f0       	brmi	.+10     	; 0x20d4 <__floatsisf+0x6c>
    20ca:	9a 95       	dec	r25
    20cc:	66 0f       	add	r22, r22
    20ce:	77 1f       	adc	r23, r23
    20d0:	88 1f       	adc	r24, r24
    20d2:	da f7       	brpl	.-10     	; 0x20ca <__floatsisf+0x62>
    20d4:	88 0f       	add	r24, r24
    20d6:	96 95       	lsr	r25
    20d8:	87 95       	ror	r24
    20da:	97 f9       	bld	r25, 7
    20dc:	08 95       	ret

000020de <__mulsf3>:
    20de:	0b d0       	rcall	.+22     	; 0x20f6 <__mulsf3x>
    20e0:	78 c0       	rjmp	.+240    	; 0x21d2 <__fp_round>
    20e2:	69 d0       	rcall	.+210    	; 0x21b6 <__fp_pscA>
    20e4:	28 f0       	brcs	.+10     	; 0x20f0 <__mulsf3+0x12>
    20e6:	6e d0       	rcall	.+220    	; 0x21c4 <__fp_pscB>
    20e8:	18 f0       	brcs	.+6      	; 0x20f0 <__mulsf3+0x12>
    20ea:	95 23       	and	r25, r21
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <__mulsf3+0x12>
    20ee:	5a c0       	rjmp	.+180    	; 0x21a4 <__fp_inf>
    20f0:	5f c0       	rjmp	.+190    	; 0x21b0 <__fp_nan>
    20f2:	11 24       	eor	r1, r1
    20f4:	a2 c0       	rjmp	.+324    	; 0x223a <__fp_szero>

000020f6 <__mulsf3x>:
    20f6:	7e d0       	rcall	.+252    	; 0x21f4 <__fp_split3>
    20f8:	a0 f3       	brcs	.-24     	; 0x20e2 <__mulsf3+0x4>

000020fa <__mulsf3_pse>:
    20fa:	95 9f       	mul	r25, r21
    20fc:	d1 f3       	breq	.-12     	; 0x20f2 <__mulsf3+0x14>
    20fe:	95 0f       	add	r25, r21
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	55 1f       	adc	r21, r21
    2104:	62 9f       	mul	r22, r18
    2106:	f0 01       	movw	r30, r0
    2108:	72 9f       	mul	r23, r18
    210a:	bb 27       	eor	r27, r27
    210c:	f0 0d       	add	r31, r0
    210e:	b1 1d       	adc	r27, r1
    2110:	63 9f       	mul	r22, r19
    2112:	aa 27       	eor	r26, r26
    2114:	f0 0d       	add	r31, r0
    2116:	b1 1d       	adc	r27, r1
    2118:	aa 1f       	adc	r26, r26
    211a:	64 9f       	mul	r22, r20
    211c:	66 27       	eor	r22, r22
    211e:	b0 0d       	add	r27, r0
    2120:	a1 1d       	adc	r26, r1
    2122:	66 1f       	adc	r22, r22
    2124:	82 9f       	mul	r24, r18
    2126:	22 27       	eor	r18, r18
    2128:	b0 0d       	add	r27, r0
    212a:	a1 1d       	adc	r26, r1
    212c:	62 1f       	adc	r22, r18
    212e:	73 9f       	mul	r23, r19
    2130:	b0 0d       	add	r27, r0
    2132:	a1 1d       	adc	r26, r1
    2134:	62 1f       	adc	r22, r18
    2136:	83 9f       	mul	r24, r19
    2138:	a0 0d       	add	r26, r0
    213a:	61 1d       	adc	r22, r1
    213c:	22 1f       	adc	r18, r18
    213e:	74 9f       	mul	r23, r20
    2140:	33 27       	eor	r19, r19
    2142:	a0 0d       	add	r26, r0
    2144:	61 1d       	adc	r22, r1
    2146:	23 1f       	adc	r18, r19
    2148:	84 9f       	mul	r24, r20
    214a:	60 0d       	add	r22, r0
    214c:	21 1d       	adc	r18, r1
    214e:	82 2f       	mov	r24, r18
    2150:	76 2f       	mov	r23, r22
    2152:	6a 2f       	mov	r22, r26
    2154:	11 24       	eor	r1, r1
    2156:	9f 57       	subi	r25, 0x7F	; 127
    2158:	50 40       	sbci	r21, 0x00	; 0
    215a:	8a f0       	brmi	.+34     	; 0x217e <__mulsf3_pse+0x84>
    215c:	e1 f0       	breq	.+56     	; 0x2196 <__mulsf3_pse+0x9c>
    215e:	88 23       	and	r24, r24
    2160:	4a f0       	brmi	.+18     	; 0x2174 <__mulsf3_pse+0x7a>
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	bb 1f       	adc	r27, r27
    2168:	66 1f       	adc	r22, r22
    216a:	77 1f       	adc	r23, r23
    216c:	88 1f       	adc	r24, r24
    216e:	91 50       	subi	r25, 0x01	; 1
    2170:	50 40       	sbci	r21, 0x00	; 0
    2172:	a9 f7       	brne	.-22     	; 0x215e <__mulsf3_pse+0x64>
    2174:	9e 3f       	cpi	r25, 0xFE	; 254
    2176:	51 05       	cpc	r21, r1
    2178:	70 f0       	brcs	.+28     	; 0x2196 <__mulsf3_pse+0x9c>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <__fp_inf>
    217c:	5e c0       	rjmp	.+188    	; 0x223a <__fp_szero>
    217e:	5f 3f       	cpi	r21, 0xFF	; 255
    2180:	ec f3       	brlt	.-6      	; 0x217c <__mulsf3_pse+0x82>
    2182:	98 3e       	cpi	r25, 0xE8	; 232
    2184:	dc f3       	brlt	.-10     	; 0x217c <__mulsf3_pse+0x82>
    2186:	86 95       	lsr	r24
    2188:	77 95       	ror	r23
    218a:	67 95       	ror	r22
    218c:	b7 95       	ror	r27
    218e:	f7 95       	ror	r31
    2190:	e7 95       	ror	r30
    2192:	9f 5f       	subi	r25, 0xFF	; 255
    2194:	c1 f7       	brne	.-16     	; 0x2186 <__mulsf3_pse+0x8c>
    2196:	fe 2b       	or	r31, r30
    2198:	88 0f       	add	r24, r24
    219a:	91 1d       	adc	r25, r1
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret

000021a4 <__fp_inf>:
    21a4:	97 f9       	bld	r25, 7
    21a6:	9f 67       	ori	r25, 0x7F	; 127
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	08 95       	ret

000021b0 <__fp_nan>:
    21b0:	9f ef       	ldi	r25, 0xFF	; 255
    21b2:	80 ec       	ldi	r24, 0xC0	; 192
    21b4:	08 95       	ret

000021b6 <__fp_pscA>:
    21b6:	00 24       	eor	r0, r0
    21b8:	0a 94       	dec	r0
    21ba:	16 16       	cp	r1, r22
    21bc:	17 06       	cpc	r1, r23
    21be:	18 06       	cpc	r1, r24
    21c0:	09 06       	cpc	r0, r25
    21c2:	08 95       	ret

000021c4 <__fp_pscB>:
    21c4:	00 24       	eor	r0, r0
    21c6:	0a 94       	dec	r0
    21c8:	12 16       	cp	r1, r18
    21ca:	13 06       	cpc	r1, r19
    21cc:	14 06       	cpc	r1, r20
    21ce:	05 06       	cpc	r0, r21
    21d0:	08 95       	ret

000021d2 <__fp_round>:
    21d2:	09 2e       	mov	r0, r25
    21d4:	03 94       	inc	r0
    21d6:	00 0c       	add	r0, r0
    21d8:	11 f4       	brne	.+4      	; 0x21de <__fp_round+0xc>
    21da:	88 23       	and	r24, r24
    21dc:	52 f0       	brmi	.+20     	; 0x21f2 <__fp_round+0x20>
    21de:	bb 0f       	add	r27, r27
    21e0:	40 f4       	brcc	.+16     	; 0x21f2 <__fp_round+0x20>
    21e2:	bf 2b       	or	r27, r31
    21e4:	11 f4       	brne	.+4      	; 0x21ea <__fp_round+0x18>
    21e6:	60 ff       	sbrs	r22, 0
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <__fp_round+0x20>
    21ea:	6f 5f       	subi	r22, 0xFF	; 255
    21ec:	7f 4f       	sbci	r23, 0xFF	; 255
    21ee:	8f 4f       	sbci	r24, 0xFF	; 255
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	08 95       	ret

000021f4 <__fp_split3>:
    21f4:	57 fd       	sbrc	r21, 7
    21f6:	90 58       	subi	r25, 0x80	; 128
    21f8:	44 0f       	add	r20, r20
    21fa:	55 1f       	adc	r21, r21
    21fc:	59 f0       	breq	.+22     	; 0x2214 <__fp_splitA+0x10>
    21fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2200:	71 f0       	breq	.+28     	; 0x221e <__fp_splitA+0x1a>
    2202:	47 95       	ror	r20

00002204 <__fp_splitA>:
    2204:	88 0f       	add	r24, r24
    2206:	97 fb       	bst	r25, 7
    2208:	99 1f       	adc	r25, r25
    220a:	61 f0       	breq	.+24     	; 0x2224 <__fp_splitA+0x20>
    220c:	9f 3f       	cpi	r25, 0xFF	; 255
    220e:	79 f0       	breq	.+30     	; 0x222e <__fp_splitA+0x2a>
    2210:	87 95       	ror	r24
    2212:	08 95       	ret
    2214:	12 16       	cp	r1, r18
    2216:	13 06       	cpc	r1, r19
    2218:	14 06       	cpc	r1, r20
    221a:	55 1f       	adc	r21, r21
    221c:	f2 cf       	rjmp	.-28     	; 0x2202 <__fp_split3+0xe>
    221e:	46 95       	lsr	r20
    2220:	f1 df       	rcall	.-30     	; 0x2204 <__fp_splitA>
    2222:	08 c0       	rjmp	.+16     	; 0x2234 <__fp_splitA+0x30>
    2224:	16 16       	cp	r1, r22
    2226:	17 06       	cpc	r1, r23
    2228:	18 06       	cpc	r1, r24
    222a:	99 1f       	adc	r25, r25
    222c:	f1 cf       	rjmp	.-30     	; 0x2210 <__fp_splitA+0xc>
    222e:	86 95       	lsr	r24
    2230:	71 05       	cpc	r23, r1
    2232:	61 05       	cpc	r22, r1
    2234:	08 94       	sec
    2236:	08 95       	ret

00002238 <__fp_zero>:
    2238:	e8 94       	clt

0000223a <__fp_szero>:
    223a:	bb 27       	eor	r27, r27
    223c:	66 27       	eor	r22, r22
    223e:	77 27       	eor	r23, r23
    2240:	cb 01       	movw	r24, r22
    2242:	97 f9       	bld	r25, 7
    2244:	08 95       	ret

00002246 <__prologue_saves__>:
    2246:	2f 92       	push	r2
    2248:	3f 92       	push	r3
    224a:	4f 92       	push	r4
    224c:	5f 92       	push	r5
    224e:	6f 92       	push	r6
    2250:	7f 92       	push	r7
    2252:	8f 92       	push	r8
    2254:	9f 92       	push	r9
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	ca 1b       	sub	r28, r26
    2270:	db 0b       	sbc	r29, r27
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	09 94       	ijmp

0000227e <__epilogue_restores__>:
    227e:	2a 88       	ldd	r2, Y+18	; 0x12
    2280:	39 88       	ldd	r3, Y+17	; 0x11
    2282:	48 88       	ldd	r4, Y+16	; 0x10
    2284:	5f 84       	ldd	r5, Y+15	; 0x0f
    2286:	6e 84       	ldd	r6, Y+14	; 0x0e
    2288:	7d 84       	ldd	r7, Y+13	; 0x0d
    228a:	8c 84       	ldd	r8, Y+12	; 0x0c
    228c:	9b 84       	ldd	r9, Y+11	; 0x0b
    228e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2290:	b9 84       	ldd	r11, Y+9	; 0x09
    2292:	c8 84       	ldd	r12, Y+8	; 0x08
    2294:	df 80       	ldd	r13, Y+7	; 0x07
    2296:	ee 80       	ldd	r14, Y+6	; 0x06
    2298:	fd 80       	ldd	r15, Y+5	; 0x05
    229a:	0c 81       	ldd	r16, Y+4	; 0x04
    229c:	1b 81       	ldd	r17, Y+3	; 0x03
    229e:	aa 81       	ldd	r26, Y+2	; 0x02
    22a0:	b9 81       	ldd	r27, Y+1	; 0x01
    22a2:	ce 0f       	add	r28, r30
    22a4:	d1 1d       	adc	r29, r1
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	ed 01       	movw	r28, r26
    22b2:	08 95       	ret

000022b4 <__ftoa_engine>:
    22b4:	28 30       	cpi	r18, 0x08	; 8
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <__ftoa_engine+0x6>
    22b8:	27 e0       	ldi	r18, 0x07	; 7
    22ba:	33 27       	eor	r19, r19
    22bc:	da 01       	movw	r26, r20
    22be:	99 0f       	add	r25, r25
    22c0:	31 1d       	adc	r19, r1
    22c2:	87 fd       	sbrc	r24, 7
    22c4:	91 60       	ori	r25, 0x01	; 1
    22c6:	00 96       	adiw	r24, 0x00	; 0
    22c8:	61 05       	cpc	r22, r1
    22ca:	71 05       	cpc	r23, r1
    22cc:	39 f4       	brne	.+14     	; 0x22dc <__ftoa_engine+0x28>
    22ce:	32 60       	ori	r19, 0x02	; 2
    22d0:	2e 5f       	subi	r18, 0xFE	; 254
    22d2:	3d 93       	st	X+, r19
    22d4:	30 e3       	ldi	r19, 0x30	; 48
    22d6:	2a 95       	dec	r18
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <__ftoa_engine+0x1e>
    22da:	08 95       	ret
    22dc:	9f 3f       	cpi	r25, 0xFF	; 255
    22de:	30 f0       	brcs	.+12     	; 0x22ec <__ftoa_engine+0x38>
    22e0:	80 38       	cpi	r24, 0x80	; 128
    22e2:	71 05       	cpc	r23, r1
    22e4:	61 05       	cpc	r22, r1
    22e6:	09 f0       	breq	.+2      	; 0x22ea <__ftoa_engine+0x36>
    22e8:	3c 5f       	subi	r19, 0xFC	; 252
    22ea:	3c 5f       	subi	r19, 0xFC	; 252
    22ec:	3d 93       	st	X+, r19
    22ee:	91 30       	cpi	r25, 0x01	; 1
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <__ftoa_engine+0x40>
    22f2:	80 68       	ori	r24, 0x80	; 128
    22f4:	91 1d       	adc	r25, r1
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	1f 93       	push	r17
    22fc:	0f 93       	push	r16
    22fe:	ff 92       	push	r15
    2300:	ef 92       	push	r14
    2302:	19 2f       	mov	r17, r25
    2304:	98 7f       	andi	r25, 0xF8	; 248
    2306:	96 95       	lsr	r25
    2308:	e9 2f       	mov	r30, r25
    230a:	96 95       	lsr	r25
    230c:	96 95       	lsr	r25
    230e:	e9 0f       	add	r30, r25
    2310:	ff 27       	eor	r31, r31
    2312:	e9 51       	subi	r30, 0x19	; 25
    2314:	fe 4f       	sbci	r31, 0xFE	; 254
    2316:	99 27       	eor	r25, r25
    2318:	33 27       	eor	r19, r19
    231a:	ee 24       	eor	r14, r14
    231c:	ff 24       	eor	r15, r15
    231e:	a7 01       	movw	r20, r14
    2320:	e7 01       	movw	r28, r14
    2322:	05 90       	lpm	r0, Z+
    2324:	08 94       	sec
    2326:	07 94       	ror	r0
    2328:	28 f4       	brcc	.+10     	; 0x2334 <__ftoa_engine+0x80>
    232a:	36 0f       	add	r19, r22
    232c:	e7 1e       	adc	r14, r23
    232e:	f8 1e       	adc	r15, r24
    2330:	49 1f       	adc	r20, r25
    2332:	51 1d       	adc	r21, r1
    2334:	66 0f       	add	r22, r22
    2336:	77 1f       	adc	r23, r23
    2338:	88 1f       	adc	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	06 94       	lsr	r0
    233e:	a1 f7       	brne	.-24     	; 0x2328 <__ftoa_engine+0x74>
    2340:	05 90       	lpm	r0, Z+
    2342:	07 94       	ror	r0
    2344:	28 f4       	brcc	.+10     	; 0x2350 <__ftoa_engine+0x9c>
    2346:	e7 0e       	add	r14, r23
    2348:	f8 1e       	adc	r15, r24
    234a:	49 1f       	adc	r20, r25
    234c:	56 1f       	adc	r21, r22
    234e:	c1 1d       	adc	r28, r1
    2350:	77 0f       	add	r23, r23
    2352:	88 1f       	adc	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	66 1f       	adc	r22, r22
    2358:	06 94       	lsr	r0
    235a:	a1 f7       	brne	.-24     	; 0x2344 <__ftoa_engine+0x90>
    235c:	05 90       	lpm	r0, Z+
    235e:	07 94       	ror	r0
    2360:	28 f4       	brcc	.+10     	; 0x236c <__ftoa_engine+0xb8>
    2362:	f8 0e       	add	r15, r24
    2364:	49 1f       	adc	r20, r25
    2366:	56 1f       	adc	r21, r22
    2368:	c7 1f       	adc	r28, r23
    236a:	d1 1d       	adc	r29, r1
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	66 1f       	adc	r22, r22
    2372:	77 1f       	adc	r23, r23
    2374:	06 94       	lsr	r0
    2376:	a1 f7       	brne	.-24     	; 0x2360 <__ftoa_engine+0xac>
    2378:	05 90       	lpm	r0, Z+
    237a:	07 94       	ror	r0
    237c:	20 f4       	brcc	.+8      	; 0x2386 <__ftoa_engine+0xd2>
    237e:	49 0f       	add	r20, r25
    2380:	56 1f       	adc	r21, r22
    2382:	c7 1f       	adc	r28, r23
    2384:	d8 1f       	adc	r29, r24
    2386:	99 0f       	add	r25, r25
    2388:	66 1f       	adc	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	06 94       	lsr	r0
    2390:	a9 f7       	brne	.-22     	; 0x237c <__ftoa_engine+0xc8>
    2392:	84 91       	lpm	r24, Z+
    2394:	10 95       	com	r17
    2396:	17 70       	andi	r17, 0x07	; 7
    2398:	41 f0       	breq	.+16     	; 0x23aa <__ftoa_engine+0xf6>
    239a:	d6 95       	lsr	r29
    239c:	c7 95       	ror	r28
    239e:	57 95       	ror	r21
    23a0:	47 95       	ror	r20
    23a2:	f7 94       	ror	r15
    23a4:	e7 94       	ror	r14
    23a6:	1a 95       	dec	r17
    23a8:	c1 f7       	brne	.-16     	; 0x239a <__ftoa_engine+0xe6>
    23aa:	ed e8       	ldi	r30, 0x8D	; 141
    23ac:	f1 e0       	ldi	r31, 0x01	; 1
    23ae:	68 94       	set
    23b0:	15 90       	lpm	r1, Z+
    23b2:	15 91       	lpm	r17, Z+
    23b4:	35 91       	lpm	r19, Z+
    23b6:	65 91       	lpm	r22, Z+
    23b8:	95 91       	lpm	r25, Z+
    23ba:	05 90       	lpm	r0, Z+
    23bc:	7f e2       	ldi	r23, 0x2F	; 47
    23be:	73 95       	inc	r23
    23c0:	e1 18       	sub	r14, r1
    23c2:	f1 0a       	sbc	r15, r17
    23c4:	43 0b       	sbc	r20, r19
    23c6:	56 0b       	sbc	r21, r22
    23c8:	c9 0b       	sbc	r28, r25
    23ca:	d0 09       	sbc	r29, r0
    23cc:	c0 f7       	brcc	.-16     	; 0x23be <__ftoa_engine+0x10a>
    23ce:	e1 0c       	add	r14, r1
    23d0:	f1 1e       	adc	r15, r17
    23d2:	43 1f       	adc	r20, r19
    23d4:	56 1f       	adc	r21, r22
    23d6:	c9 1f       	adc	r28, r25
    23d8:	d0 1d       	adc	r29, r0
    23da:	7e f4       	brtc	.+30     	; 0x23fa <__ftoa_engine+0x146>
    23dc:	70 33       	cpi	r23, 0x30	; 48
    23de:	11 f4       	brne	.+4      	; 0x23e4 <__ftoa_engine+0x130>
    23e0:	8a 95       	dec	r24
    23e2:	e6 cf       	rjmp	.-52     	; 0x23b0 <__ftoa_engine+0xfc>
    23e4:	e8 94       	clt
    23e6:	01 50       	subi	r16, 0x01	; 1
    23e8:	30 f0       	brcs	.+12     	; 0x23f6 <__ftoa_engine+0x142>
    23ea:	08 0f       	add	r16, r24
    23ec:	0a f4       	brpl	.+2      	; 0x23f0 <__ftoa_engine+0x13c>
    23ee:	00 27       	eor	r16, r16
    23f0:	02 17       	cp	r16, r18
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <__ftoa_engine+0x142>
    23f4:	20 2f       	mov	r18, r16
    23f6:	23 95       	inc	r18
    23f8:	02 2f       	mov	r16, r18
    23fa:	7a 33       	cpi	r23, 0x3A	; 58
    23fc:	28 f0       	brcs	.+10     	; 0x2408 <__ftoa_engine+0x154>
    23fe:	79 e3       	ldi	r23, 0x39	; 57
    2400:	7d 93       	st	X+, r23
    2402:	2a 95       	dec	r18
    2404:	e9 f7       	brne	.-6      	; 0x2400 <__ftoa_engine+0x14c>
    2406:	10 c0       	rjmp	.+32     	; 0x2428 <__ftoa_engine+0x174>
    2408:	7d 93       	st	X+, r23
    240a:	2a 95       	dec	r18
    240c:	89 f6       	brne	.-94     	; 0x23b0 <__ftoa_engine+0xfc>
    240e:	06 94       	lsr	r0
    2410:	97 95       	ror	r25
    2412:	67 95       	ror	r22
    2414:	37 95       	ror	r19
    2416:	17 95       	ror	r17
    2418:	17 94       	ror	r1
    241a:	e1 18       	sub	r14, r1
    241c:	f1 0a       	sbc	r15, r17
    241e:	43 0b       	sbc	r20, r19
    2420:	56 0b       	sbc	r21, r22
    2422:	c9 0b       	sbc	r28, r25
    2424:	d0 09       	sbc	r29, r0
    2426:	98 f0       	brcs	.+38     	; 0x244e <__ftoa_engine+0x19a>
    2428:	23 95       	inc	r18
    242a:	7e 91       	ld	r23, -X
    242c:	73 95       	inc	r23
    242e:	7a 33       	cpi	r23, 0x3A	; 58
    2430:	08 f0       	brcs	.+2      	; 0x2434 <__ftoa_engine+0x180>
    2432:	70 e3       	ldi	r23, 0x30	; 48
    2434:	7c 93       	st	X, r23
    2436:	20 13       	cpse	r18, r16
    2438:	b8 f7       	brcc	.-18     	; 0x2428 <__ftoa_engine+0x174>
    243a:	7e 91       	ld	r23, -X
    243c:	70 61       	ori	r23, 0x10	; 16
    243e:	7d 93       	st	X+, r23
    2440:	30 f0       	brcs	.+12     	; 0x244e <__ftoa_engine+0x19a>
    2442:	83 95       	inc	r24
    2444:	71 e3       	ldi	r23, 0x31	; 49
    2446:	7d 93       	st	X+, r23
    2448:	70 e3       	ldi	r23, 0x30	; 48
    244a:	2a 95       	dec	r18
    244c:	e1 f7       	brne	.-8      	; 0x2446 <__ftoa_engine+0x192>
    244e:	11 24       	eor	r1, r1
    2450:	ef 90       	pop	r14
    2452:	ff 90       	pop	r15
    2454:	0f 91       	pop	r16
    2456:	1f 91       	pop	r17
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	99 27       	eor	r25, r25
    245e:	87 fd       	sbrc	r24, 7
    2460:	90 95       	com	r25
    2462:	08 95       	ret

00002464 <isspace>:
    2464:	91 11       	cpse	r25, r1
    2466:	39 c1       	rjmp	.+626    	; 0x26da <__ctype_isfalse>
    2468:	80 32       	cpi	r24, 0x20	; 32
    246a:	19 f0       	breq	.+6      	; 0x2472 <isspace+0xe>
    246c:	89 50       	subi	r24, 0x09	; 9
    246e:	85 50       	subi	r24, 0x05	; 5
    2470:	d0 f7       	brcc	.-12     	; 0x2466 <isspace+0x2>
    2472:	08 95       	ret

00002474 <tolower>:
    2474:	91 11       	cpse	r25, r1
    2476:	08 95       	ret
    2478:	81 54       	subi	r24, 0x41	; 65
    247a:	8a 51       	subi	r24, 0x1A	; 26
    247c:	08 f4       	brcc	.+2      	; 0x2480 <tolower+0xc>
    247e:	80 5e       	subi	r24, 0xE0	; 224
    2480:	85 5a       	subi	r24, 0xA5	; 165
    2482:	08 95       	ret

00002484 <strchr_P>:
    2484:	fc 01       	movw	r30, r24
    2486:	05 90       	lpm	r0, Z+
    2488:	06 16       	cp	r0, r22
    248a:	21 f0       	breq	.+8      	; 0x2494 <strchr_P+0x10>
    248c:	00 20       	and	r0, r0
    248e:	d9 f7       	brne	.-10     	; 0x2486 <strchr_P+0x2>
    2490:	c0 01       	movw	r24, r0
    2492:	08 95       	ret
    2494:	31 97       	sbiw	r30, 0x01	; 1
    2496:	cf 01       	movw	r24, r30
    2498:	08 95       	ret

0000249a <strnlen_P>:
    249a:	fc 01       	movw	r30, r24
    249c:	05 90       	lpm	r0, Z+
    249e:	61 50       	subi	r22, 0x01	; 1
    24a0:	70 40       	sbci	r23, 0x00	; 0
    24a2:	01 10       	cpse	r0, r1
    24a4:	d8 f7       	brcc	.-10     	; 0x249c <strnlen_P+0x2>
    24a6:	80 95       	com	r24
    24a8:	90 95       	com	r25
    24aa:	8e 0f       	add	r24, r30
    24ac:	9f 1f       	adc	r25, r31
    24ae:	08 95       	ret

000024b0 <strnlen>:
    24b0:	fc 01       	movw	r30, r24
    24b2:	61 50       	subi	r22, 0x01	; 1
    24b4:	70 40       	sbci	r23, 0x00	; 0
    24b6:	01 90       	ld	r0, Z+
    24b8:	01 10       	cpse	r0, r1
    24ba:	d8 f7       	brcc	.-10     	; 0x24b2 <strnlen+0x2>
    24bc:	80 95       	com	r24
    24be:	90 95       	com	r25
    24c0:	8e 0f       	add	r24, r30
    24c2:	9f 1f       	adc	r25, r31
    24c4:	08 95       	ret

000024c6 <fgetc>:
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	ec 01       	movw	r28, r24
    24cc:	3b 81       	ldd	r19, Y+3	; 0x03
    24ce:	30 ff       	sbrs	r19, 0
    24d0:	36 c0       	rjmp	.+108    	; 0x253e <fgetc+0x78>
    24d2:	36 ff       	sbrs	r19, 6
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <fgetc+0x22>
    24d6:	3f 7b       	andi	r19, 0xBF	; 191
    24d8:	3b 83       	std	Y+3, r19	; 0x03
    24da:	8e 81       	ldd	r24, Y+6	; 0x06
    24dc:	9f 81       	ldd	r25, Y+7	; 0x07
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	9f 83       	std	Y+7, r25	; 0x07
    24e2:	8e 83       	std	Y+6, r24	; 0x06
    24e4:	2a 81       	ldd	r18, Y+2	; 0x02
    24e6:	29 c0       	rjmp	.+82     	; 0x253a <fgetc+0x74>
    24e8:	32 ff       	sbrs	r19, 2
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <fgetc+0x44>
    24ec:	e8 81       	ld	r30, Y
    24ee:	f9 81       	ldd	r31, Y+1	; 0x01
    24f0:	80 81       	ld	r24, Z
    24f2:	99 27       	eor	r25, r25
    24f4:	87 fd       	sbrc	r24, 7
    24f6:	90 95       	com	r25
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	19 f4       	brne	.+6      	; 0x2502 <fgetc+0x3c>
    24fc:	30 62       	ori	r19, 0x20	; 32
    24fe:	3b 83       	std	Y+3, r19	; 0x03
    2500:	1e c0       	rjmp	.+60     	; 0x253e <fgetc+0x78>
    2502:	31 96       	adiw	r30, 0x01	; 1
    2504:	f9 83       	std	Y+1, r31	; 0x01
    2506:	e8 83       	st	Y, r30
    2508:	11 c0       	rjmp	.+34     	; 0x252c <fgetc+0x66>
    250a:	ea 85       	ldd	r30, Y+10	; 0x0a
    250c:	fb 85       	ldd	r31, Y+11	; 0x0b
    250e:	ce 01       	movw	r24, r28
    2510:	09 95       	icall
    2512:	97 ff       	sbrs	r25, 7
    2514:	0b c0       	rjmp	.+22     	; 0x252c <fgetc+0x66>
    2516:	2b 81       	ldd	r18, Y+3	; 0x03
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	8f 3f       	cpi	r24, 0xFF	; 255
    251c:	93 07       	cpc	r25, r19
    251e:	11 f4       	brne	.+4      	; 0x2524 <fgetc+0x5e>
    2520:	80 e1       	ldi	r24, 0x10	; 16
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <fgetc+0x60>
    2524:	80 e2       	ldi	r24, 0x20	; 32
    2526:	82 2b       	or	r24, r18
    2528:	8b 83       	std	Y+3, r24	; 0x03
    252a:	09 c0       	rjmp	.+18     	; 0x253e <fgetc+0x78>
    252c:	2e 81       	ldd	r18, Y+6	; 0x06
    252e:	3f 81       	ldd	r19, Y+7	; 0x07
    2530:	2f 5f       	subi	r18, 0xFF	; 255
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	3f 83       	std	Y+7, r19	; 0x07
    2536:	2e 83       	std	Y+6, r18	; 0x06
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <fgetc+0x7c>
    253e:	2f ef       	ldi	r18, 0xFF	; 255
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	c9 01       	movw	r24, r18
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <fputc>:
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	8c 01       	movw	r16, r24
    2554:	eb 01       	movw	r28, r22
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	81 ff       	sbrs	r24, 1
    255a:	1b c0       	rjmp	.+54     	; 0x2592 <fputc+0x48>
    255c:	82 ff       	sbrs	r24, 2
    255e:	0d c0       	rjmp	.+26     	; 0x257a <fputc+0x30>
    2560:	2e 81       	ldd	r18, Y+6	; 0x06
    2562:	3f 81       	ldd	r19, Y+7	; 0x07
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	28 17       	cp	r18, r24
    256a:	39 07       	cpc	r19, r25
    256c:	64 f4       	brge	.+24     	; 0x2586 <fputc+0x3c>
    256e:	e8 81       	ld	r30, Y
    2570:	f9 81       	ldd	r31, Y+1	; 0x01
    2572:	01 93       	st	Z+, r16
    2574:	f9 83       	std	Y+1, r31	; 0x01
    2576:	e8 83       	st	Y, r30
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <fputc+0x3c>
    257a:	e8 85       	ldd	r30, Y+8	; 0x08
    257c:	f9 85       	ldd	r31, Y+9	; 0x09
    257e:	80 2f       	mov	r24, r16
    2580:	09 95       	icall
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	31 f4       	brne	.+12     	; 0x2592 <fputc+0x48>
    2586:	8e 81       	ldd	r24, Y+6	; 0x06
    2588:	9f 81       	ldd	r25, Y+7	; 0x07
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	9f 83       	std	Y+7, r25	; 0x07
    258e:	8e 83       	std	Y+6, r24	; 0x06
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <fputc+0x4c>
    2592:	0f ef       	ldi	r16, 0xFF	; 255
    2594:	1f ef       	ldi	r17, 0xFF	; 255
    2596:	c8 01       	movw	r24, r16
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	08 95       	ret

000025a2 <fputs>:
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	7c 01       	movw	r14, r24
    25b0:	eb 01       	movw	r28, r22
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	81 ff       	sbrs	r24, 1
    25b6:	11 c0       	rjmp	.+34     	; 0x25da <fputs+0x38>
    25b8:	00 e0       	ldi	r16, 0x00	; 0
    25ba:	10 e0       	ldi	r17, 0x00	; 0
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <fputs+0x2c>
    25be:	e8 85       	ldd	r30, Y+8	; 0x08
    25c0:	f9 85       	ldd	r31, Y+9	; 0x09
    25c2:	be 01       	movw	r22, r28
    25c4:	09 95       	icall
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	11 f0       	breq	.+4      	; 0x25ce <fputs+0x2c>
    25ca:	0f ef       	ldi	r16, 0xFF	; 255
    25cc:	1f ef       	ldi	r17, 0xFF	; 255
    25ce:	f7 01       	movw	r30, r14
    25d0:	81 91       	ld	r24, Z+
    25d2:	7f 01       	movw	r14, r30
    25d4:	88 23       	and	r24, r24
    25d6:	99 f7       	brne	.-26     	; 0x25be <fputs+0x1c>
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <fputs+0x3c>
    25da:	0f ef       	ldi	r16, 0xFF	; 255
    25dc:	1f ef       	ldi	r17, 0xFF	; 255
    25de:	c8 01       	movw	r24, r16
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	e6 e0       	ldi	r30, 0x06	; 6
    25e6:	57 ce       	rjmp	.-850    	; 0x2296 <__epilogue_restores__+0x18>

000025e8 <ungetc>:
    25e8:	fb 01       	movw	r30, r22
    25ea:	23 81       	ldd	r18, Z+3	; 0x03
    25ec:	20 ff       	sbrs	r18, 0
    25ee:	13 c0       	rjmp	.+38     	; 0x2616 <ungetc+0x2e>
    25f0:	26 fd       	sbrc	r18, 6
    25f2:	11 c0       	rjmp	.+34     	; 0x2616 <ungetc+0x2e>
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	8f 3f       	cpi	r24, 0xFF	; 255
    25f8:	93 07       	cpc	r25, r19
    25fa:	69 f0       	breq	.+26     	; 0x2616 <ungetc+0x2e>
    25fc:	82 83       	std	Z+2, r24	; 0x02
    25fe:	20 64       	ori	r18, 0x40	; 64
    2600:	2f 7d       	andi	r18, 0xDF	; 223
    2602:	23 83       	std	Z+3, r18	; 0x03
    2604:	26 81       	ldd	r18, Z+6	; 0x06
    2606:	37 81       	ldd	r19, Z+7	; 0x07
    2608:	21 50       	subi	r18, 0x01	; 1
    260a:	30 40       	sbci	r19, 0x00	; 0
    260c:	37 83       	std	Z+7, r19	; 0x07
    260e:	26 83       	std	Z+6, r18	; 0x06
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	02 c0       	rjmp	.+4      	; 0x261a <ungetc+0x32>
    2616:	2f ef       	ldi	r18, 0xFF	; 255
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	c9 01       	movw	r24, r18
    261c:	08 95       	ret

0000261e <__ultoa_invert>:
    261e:	fa 01       	movw	r30, r20
    2620:	aa 27       	eor	r26, r26
    2622:	28 30       	cpi	r18, 0x08	; 8
    2624:	51 f1       	breq	.+84     	; 0x267a <__ultoa_invert+0x5c>
    2626:	20 31       	cpi	r18, 0x10	; 16
    2628:	81 f1       	breq	.+96     	; 0x268a <__ultoa_invert+0x6c>
    262a:	e8 94       	clt
    262c:	6f 93       	push	r22
    262e:	6e 7f       	andi	r22, 0xFE	; 254
    2630:	6e 5f       	subi	r22, 0xFE	; 254
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	8f 4f       	sbci	r24, 0xFF	; 255
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	af 4f       	sbci	r26, 0xFF	; 255
    263a:	b1 e0       	ldi	r27, 0x01	; 1
    263c:	3e d0       	rcall	.+124    	; 0x26ba <__ultoa_invert+0x9c>
    263e:	b4 e0       	ldi	r27, 0x04	; 4
    2640:	3c d0       	rcall	.+120    	; 0x26ba <__ultoa_invert+0x9c>
    2642:	67 0f       	add	r22, r23
    2644:	78 1f       	adc	r23, r24
    2646:	89 1f       	adc	r24, r25
    2648:	9a 1f       	adc	r25, r26
    264a:	a1 1d       	adc	r26, r1
    264c:	68 0f       	add	r22, r24
    264e:	79 1f       	adc	r23, r25
    2650:	8a 1f       	adc	r24, r26
    2652:	91 1d       	adc	r25, r1
    2654:	a1 1d       	adc	r26, r1
    2656:	6a 0f       	add	r22, r26
    2658:	71 1d       	adc	r23, r1
    265a:	81 1d       	adc	r24, r1
    265c:	91 1d       	adc	r25, r1
    265e:	a1 1d       	adc	r26, r1
    2660:	20 d0       	rcall	.+64     	; 0x26a2 <__ultoa_invert+0x84>
    2662:	09 f4       	brne	.+2      	; 0x2666 <__ultoa_invert+0x48>
    2664:	68 94       	set
    2666:	3f 91       	pop	r19
    2668:	2a e0       	ldi	r18, 0x0A	; 10
    266a:	26 9f       	mul	r18, r22
    266c:	11 24       	eor	r1, r1
    266e:	30 19       	sub	r19, r0
    2670:	30 5d       	subi	r19, 0xD0	; 208
    2672:	31 93       	st	Z+, r19
    2674:	de f6       	brtc	.-74     	; 0x262c <__ultoa_invert+0xe>
    2676:	cf 01       	movw	r24, r30
    2678:	08 95       	ret
    267a:	46 2f       	mov	r20, r22
    267c:	47 70       	andi	r20, 0x07	; 7
    267e:	40 5d       	subi	r20, 0xD0	; 208
    2680:	41 93       	st	Z+, r20
    2682:	b3 e0       	ldi	r27, 0x03	; 3
    2684:	0f d0       	rcall	.+30     	; 0x26a4 <__ultoa_invert+0x86>
    2686:	c9 f7       	brne	.-14     	; 0x267a <__ultoa_invert+0x5c>
    2688:	f6 cf       	rjmp	.-20     	; 0x2676 <__ultoa_invert+0x58>
    268a:	46 2f       	mov	r20, r22
    268c:	4f 70       	andi	r20, 0x0F	; 15
    268e:	40 5d       	subi	r20, 0xD0	; 208
    2690:	4a 33       	cpi	r20, 0x3A	; 58
    2692:	18 f0       	brcs	.+6      	; 0x269a <__ultoa_invert+0x7c>
    2694:	49 5d       	subi	r20, 0xD9	; 217
    2696:	31 fd       	sbrc	r19, 1
    2698:	40 52       	subi	r20, 0x20	; 32
    269a:	41 93       	st	Z+, r20
    269c:	02 d0       	rcall	.+4      	; 0x26a2 <__ultoa_invert+0x84>
    269e:	a9 f7       	brne	.-22     	; 0x268a <__ultoa_invert+0x6c>
    26a0:	ea cf       	rjmp	.-44     	; 0x2676 <__ultoa_invert+0x58>
    26a2:	b4 e0       	ldi	r27, 0x04	; 4
    26a4:	a6 95       	lsr	r26
    26a6:	97 95       	ror	r25
    26a8:	87 95       	ror	r24
    26aa:	77 95       	ror	r23
    26ac:	67 95       	ror	r22
    26ae:	ba 95       	dec	r27
    26b0:	c9 f7       	brne	.-14     	; 0x26a4 <__ultoa_invert+0x86>
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	61 05       	cpc	r22, r1
    26b6:	71 05       	cpc	r23, r1
    26b8:	08 95       	ret
    26ba:	9b 01       	movw	r18, r22
    26bc:	ac 01       	movw	r20, r24
    26be:	0a 2e       	mov	r0, r26
    26c0:	06 94       	lsr	r0
    26c2:	57 95       	ror	r21
    26c4:	47 95       	ror	r20
    26c6:	37 95       	ror	r19
    26c8:	27 95       	ror	r18
    26ca:	ba 95       	dec	r27
    26cc:	c9 f7       	brne	.-14     	; 0x26c0 <__ultoa_invert+0xa2>
    26ce:	62 0f       	add	r22, r18
    26d0:	73 1f       	adc	r23, r19
    26d2:	84 1f       	adc	r24, r20
    26d4:	95 1f       	adc	r25, r21
    26d6:	a0 1d       	adc	r26, r0
    26d8:	08 95       	ret

000026da <__ctype_isfalse>:
    26da:	99 27       	eor	r25, r25
    26dc:	88 27       	eor	r24, r24

000026de <__ctype_istrue>:
    26de:	08 95       	ret

000026e0 <_exit>:
    26e0:	f8 94       	cli

000026e2 <__stop_program>:
    26e2:	ff cf       	rjmp	.-2      	; 0x26e2 <__stop_program>
